---
import { auth, GoogleAuthProvider, signInWithPopup, OAuthProvider, createUserWithEmailAndPassword, updateProfile } from '../firebase';
---

<div class="auth-container">
	<section id="sign-up">
		<h2>Create Account</h2>
		<p class="subtitle">Join our community today</p>
		<form id="signup-form">
			<div class="input-group">
				<label for="username">Username:</label>
				<input type="text" id="username" name="username" required placeholder="Choose a username" />
			</div>
			
			<label for="email">Email:</label>
			<input type="email" id="email" name="email" required />
			
			<label for="password">Password:</label>
			<input type="password" id="password" name="password" required />
			
			<button type="submit">Sign Up</button>
		</form>

		<!-- Google Sign Up Button -->
		<button id="google-sign-up">Sign up with Google</button>

		<!-- Apple Sign Up Button -->
		<button id="apple-sign-up">Sign up with Apple</button>

		<div id="error-message" class="error-message hidden"></div>
		<div id="success-message" class="success-message hidden"></div>

		<p class="auth-footer">
			Already have an account? <a href="/signin">Sign in</a>
		</p>
	</section>
</div>

<style>
	#sign-up {
		padding: 20px;
		background: rgba(255, 255, 255, 0.9);
		border-radius: 10px;
		box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
		margin: 20px auto;
		max-width: 400px;
		text-align: center;
	}

	h2 {
		color: #2c3e50;
	}

	label {
		display: block;
		margin: 10px 0 5px;
		color: #34495e;
	}

	input {
		width: 100%;
		padding: 10px;
		margin-bottom: 15px;
		border: 1px solid #ccc;
		border-radius: 5px;
	}

	button {
		padding: 10px 20px;
		background: #4caf50;
		color: white;
		border: none;
		border-radius: 5px;
		cursor: pointer;
	}

	button:hover {
		background: #388e3c;
	}

	.error-message, .success-message {
		padding: 10px;
		border-radius: 8px;
		margin: 10px 0;
		text-align: center;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	.error-message {
		background: #ffebee;
		color: #c62828;
		border: 1px solid #ffcdd2;
	}

	.success-message {
		background: #e8f5e9;
		color: #2e7d32;
		border: 1px solid #c8e6c9;
	}

	.hidden {
		display: none;
		opacity: 0;
	}

	.loading {
		opacity: 0.7;
		pointer-events: none;
	}
</style>

<script>
	import { 
		auth,
		GoogleAuthProvider,
		signInWithPopup,
		OAuthProvider,
		createUserWithEmailAndPassword,
		updateProfile,
		onAuthStateChanged,
		type User
	} from '../firebase';

	const form = document.getElementById('signup-form');
	const errorMessage = document.getElementById('error-message');
	const successMessage = document.getElementById('success-message');

	// Auth state observer
	onAuthStateChanged(auth, (user: User | null) => {
		if (user) {
			// User is signed in
			window.location.href = '/dashboard';
		}
	});

	function showMessage(element: HTMLElement | null, message: string) {
		if (!element) return;
		element.textContent = message;
		element.classList.remove('hidden');
		setTimeout(() => {
			element.classList.add('hidden');
		}, 5000);
	}

	function setLoading(isLoading: boolean) {
		const buttons = document.querySelectorAll('button');
		buttons.forEach(button => {
			button.disabled = isLoading;
			button.classList.toggle('loading', isLoading);
		});
	}

	// Email/Password Sign Up
	form?.addEventListener('submit', async (e) => {
		e.preventDefault();
		setLoading(true);

		const email = (document.getElementById('email') as HTMLInputElement)?.value;
		const password = (document.getElementById('password') as HTMLInputElement)?.value;
		const username = (document.getElementById('username') as HTMLInputElement)?.value;

		try {
			const userCredential = await createUserWithEmailAndPassword(auth, email, password);
			await updateProfile(userCredential.user, {
				displayName: username
			});
			showMessage(successMessage, 'Account created successfully!');
		} catch (error: any) {
			showMessage(errorMessage, error.message || 'Failed to create account');
		} finally {
			setLoading(false);
		}
	});
	// Google Sign Up
	document.getElementById('google-sign-up')?.addEventListener('click', async () => {
		setLoading(true);
		try {
			const provider = new GoogleAuthProvider();
			// Add scopes for additional Google account info
			provider.addScope('email');
			provider.addScope('profile');
			
			const result = await signInWithPopup(auth, provider);
			// Get Google access token
			const credential = GoogleAuthProvider.credentialFromResult(result);
			
			showMessage(successMessage, 'Successfully signed up with Google!');
		} catch (error: any) {
			console.error('Google sign up error:', error);
			let message = 'Failed to sign up with Google';
			if (error.code === 'auth/popup-closed-by-user') {
				message = 'Sign up cancelled';
			} else if (error.code === 'auth/popup-blocked') {
				message = 'Please enable popups to sign up with Google';
			}
			showMessage(errorMessage, message);
		} finally {
			setLoading(false);
		}
	});

	// Apple Sign Up
	document.getElementById('apple-sign-up')?.addEventListener('click', async () => {
		setLoading(true);
		try {
			const provider = new OAuthProvider('apple.com');
			// Add scopes for Apple sign in
			provider.addScope('email');
			provider.addScope('name');
			
			const result = await signInWithPopup(auth, provider);
			// Get Apple credentials
			const credential = OAuthProvider.credentialFromResult(result);
			
			showMessage(successMessage, 'Successfully signed up with Apple!');
		} catch (error: any) {
			console.error('Apple sign up error:', error);
			let message = 'Failed to sign up with Apple';
			if (error.code === 'auth/popup-closed-by-user') {
				message = 'Sign up cancelled';
			} else if (error.code === 'auth/popup-blocked') {
				message = 'Please enable popups to sign up with Apple';
			}
			showMessage(errorMessage, message);
		} finally {
			setLoading(false);
		}
	});
</script>