---
import { useState } from 'react';

const SignUp = () => {
	const [loading, setLoading] = useState(false);
	const [errorMessage, setErrorMessage] = useState('');
	const [successMessage, setSuccessMessage] = useState('');

	const handleSubmit = async (e) => {
		e.preventDefault();
		setLoading(true);

		const formData = new FormData(e.target);

		try {
			const response = await fetch('/api/auth/signup', {
				method: 'POST',
				body: formData,
			});

			const data = await response.json();

			if (!response.ok) {
				throw new Error(data.message || 'Signup failed');
			}

			setSuccessMessage('Account created successfully! Redirecting...');
			setTimeout(() => {
				window.location.href = '/dashboard';
			}, 2000);
		} catch (error) {
			setErrorMessage(error.message || 'An error occurred');
		} finally {
			setLoading(false);
		}
	};

	return (
		<div className="auth-container">
			<section id="sign-up">
				<h2>Create Account</h2>
				<p className="subtitle">Join our community today</p>
				<form id="signup-form" onSubmit={handleSubmit}>
					<div className="input-group">
						<label htmlFor="username">Username:</label>
						<input type="text" id="username" name="username" required placeholder="Choose a username" />
					</div>

					<label htmlFor="email">Email:</label>
					<input type="email" id="email" name="email" required />

					<label htmlFor="password">Password:</label>
					<input type="password" id="password" name="password" required />

					<button type="submit" disabled={loading}>Sign Up</button>
				</form>

				{errorMessage && <div className="error-message">{errorMessage}</div>}
				{successMessage && <div className="success-message">{successMessage}</div>}

				<p className="auth-footer">
					Already have an account? <a href="/signin">Sign in</a>
				</p>
			</section>
		</div>
	);
};

export default SignUp;

<style>
	#sign-up {
		padding: 20px;
		background: rgba(255, 255, 255, 0.95);
		border-radius: 12px;
		box-shadow: 0 6px 24px rgba(0, 0, 0, 0.12);
		margin: 20px auto;
		max-width: 420px;
		text-align: center;
	}

	h2 {
		color: #2c3e50;
		font-size: 1.75rem;
		margin-bottom: 10px;
	}

	label {
		display: block;
		margin: 12px 0 6px;
		color: #34495e;
		font-weight: 500;
	}

	input {
		width: 100%;
		padding: 12px;
		margin-bottom: 16px;
		border: 1px solid #ccc;
		border-radius: 6px;
		font-size: 1rem;
	}

	button {
		padding: 12px 24px;
		background: #4caf50;
		color: white;
		border: none;
		border-radius: 6px;
		cursor: pointer;
		width: 100%;
		margin-bottom: 12px;
		font-size: 1rem;
		transition: background 0.3s ease;
	}

	button:disabled {
		background: #9e9e9e;
		cursor: not-allowed;
	}

	button:hover:not(:disabled) {
		background: #388e3c;
	}

	.error-message, .success-message {
		padding: 12px;
		border-radius: 8px;
		margin: 12px 0;
		text-align: center;
		opacity: 1;
		transition: opacity 0.3s ease;
		font-size: 0.9rem;
	}

	.error-message {
		background: #ffebee;
		color: #c62828;
		border: 1px solid #ffcdd2;
	}

	.success-message {
		background: #e8f5e9;
		color: #2e7d32;
		border: 1px solid #c8e6c9;
	}

	.auth-footer {
		margin-top: 24px;
		font-size: 0.9rem;
	}

	.auth-footer a {
		color: #4caf50;
		text-decoration: none;
		font-weight: 500;
	}

	.auth-footer a:hover {
		text-decoration: underline;
	}

	@media (prefers-reduced-motion: reduce) {
		* {
			transition: none !important;
		}
	}
</style>