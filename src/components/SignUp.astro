---
// Import types to fix TypeScript errors
import type { Auth } from 'firebase/auth';
import { 
  auth, 
  GoogleAuthProvider, 
  signInWithPopup, 
  OAuthProvider, 
  createUserWithEmailAndPassword, 
  updateProfile,
  onAuthStateChanged,
  type User
} from '../firebase';
---

<div class="auth-container">
	<section id="sign-up">
		<h2>Create Account</h2>
		<p class="subtitle">Join our community today</p>
		<form id="signup-form" action="/api/auth/signup" method="POST">
			<div class="input-group">
				<label for="username">Username:</label>
				<input type="text" id="username" name="username" required placeholder="Choose a username" />
			</div>
			
			<label for="email">Email:</label>
			<input type="email" id="email" name="email" required />
			
			<label for="password">Password:</label>
			<input type="password" id="password" name="password" required />
			
			<button type="submit">Sign Up</button>
		</form>

		<div id="error-message" class="error-message hidden"></div>
		<div id="success-message" class="success-message hidden"></div>

		<p class="auth-footer">
			Already have an account? <a href="/signin">Sign in</a>
		</p>
	</section>
</div>

<style>
	#sign-up {
		padding: 20px;
		background: rgba(255, 255, 255, 0.9);
		border-radius: 10px;
		box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
		margin: 20px auto;
		max-width: 400px;
		text-align: center;
	}

	h2 {
		color: #2c3e50;
	}

	label {
		display: block;
		margin: 10px 0 5px;
		color: #34495e;
	}

	input {
		width: 100%;
		padding: 10px;
		margin-bottom: 15px;
		border: 1px solid #ccc;
		border-radius: 5px;
	}

	button {
		padding: 10px 20px;
		background: #4caf50;
		color: white;
		border: none;
		border-radius: 5px;
		cursor: pointer;
		width: 100%;
		margin-bottom: 10px;
	}

	button:hover {
		background: #388e3c;
	}

	.error-message, .success-message {
		padding: 10px;
		border-radius: 8px;
		margin: 10px 0;
		text-align: center;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	.error-message {
		background: #ffebee;
		color: #c62828;
		border: 1px solid #ffcdd2;
	}

	.success-message {
		background: #e8f5e9;
		color: #2e7d32;
		border: 1px solid #c8e6c9;
	}

	.hidden {
		display: none;
		opacity: 0;
	}

	.loading {
		opacity: 0.7;
		pointer-events: none;
	}

	.auth-footer {
		margin-top: 20px;
	}

	.auth-footer a {
		color: #4caf50;
		text-decoration: none;
	}

	.auth-footer a:hover {
		text-decoration: underline;
	}

	@media (prefers-reduced-motion: reduce) {
		* {
			transition: none !important;
		}
	}
</style>

<script>
	// Get DOM elements
	const form = document.getElementById('signup-form') as HTMLFormElement;
	const errorMessage = document.getElementById('error-message') as HTMLDivElement;
	const successMessage = document.getElementById('success-message') as HTMLDivElement;

	function showMessage(element: HTMLElement | null, message: string): void {
		if (!element) return;
		element.textContent = message;
		element.classList.remove('hidden');
		element.style.opacity = '1';
		setTimeout(() => {
			element.style.opacity = '0';
			setTimeout(() => {
				element.classList.add('hidden');
			}, 300);
		}, 5000);
	}

	function setLoading(isLoading: boolean): void {
		const buttons = document.querySelectorAll<HTMLButtonElement>('button');
		const inputs = document.querySelectorAll<HTMLInputElement>('input');
		
		buttons.forEach(button => {
			button.disabled = isLoading;
			button.classList.toggle('loading', isLoading);
		});
		
		inputs.forEach(input => {
			input.disabled = isLoading;
		});
	}

	// Form submission handler
	if (form) {
		form.addEventListener('submit', async (e) => {
			e.preventDefault();
			setLoading(true);

			try {
				const formData = new FormData(form);
				const response = await fetch('/api/auth/signup', {
					method: 'POST',
					body: formData,
				});

				const data = await response.json();

				if (!response.ok) {
					throw new Error(data.message || 'Signup failed');
				}

				showMessage(successMessage, 'Account created successfully! Redirecting...');
				setTimeout(() => {
					window.location.href = '/dashboard';
				}, 2000);
			} catch (error) {
				showMessage(errorMessage, error instanceof Error ? error.message : 'An error occurred');
			} finally {
				setLoading(false);
			}
		});
	}
</script>