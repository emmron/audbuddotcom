---
// Import types to fix TypeScript errors
import type { Auth } from 'firebase/auth';
import { 
  auth, 
  GoogleAuthProvider, 
  signInWithPopup, 
  OAuthProvider, 
  createUserWithEmailAndPassword, 
  updateProfile,
  onAuthStateChanged,
  type User
} from '../firebase';
---

<div class="auth-container">
	<section id="sign-up">
		<h2>Create Account</h2>
		<p class="subtitle">Join our community today</p>
		<form id="signup-form">
			<div class="input-group">
				<label for="username">Username:</label>
				<input type="text" id="username" name="username" required placeholder="Choose a username" />
			</div>
			
			<label for="email">Email:</label>
			<input type="email" id="email" name="email" required />
			
			<label for="password">Password:</label>
			<input type="password" id="password" name="password" required />
			
			<button type="submit">Sign Up</button>
		</form>

		<!-- Google Sign Up Button -->
		<button id="google-sign-up">Sign up with Google</button>

		<!-- Apple Sign Up Button -->
		<button id="apple-sign-up">Sign up with Apple</button>

		<div id="error-message" class="error-message hidden"></div>
		<div id="success-message" class="success-message hidden"></div>

		<p class="auth-footer">
			Already have an account? <a href="/signin">Sign in</a>
		</p>
	</section>
</div>

<style>
	#sign-up {
		padding: 20px;
		background: rgba(255, 255, 255, 0.9);
		border-radius: 10px;
		box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
		margin: 20px auto;
		max-width: 400px;
		text-align: center;
	}

	h2 {
		color: #2c3e50;
	}

	label {
		display: block;
		margin: 10px 0 5px;
		color: #34495e;
	}

	input {
		width: 100%;
		padding: 10px;
		margin-bottom: 15px;
		border: 1px solid #ccc;
		border-radius: 5px;
	}

	button {
		padding: 10px 20px;
		background: #4caf50;
		color: white;
		border: none;
		border-radius: 5px;
		cursor: pointer;
		width: 100%;
		margin-bottom: 10px;
	}

	button:hover {
		background: #388e3c;
	}

	.error-message, .success-message {
		padding: 10px;
		border-radius: 8px;
		margin: 10px 0;
		text-align: center;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	.error-message {
		background: #ffebee;
		color: #c62828;
		border: 1px solid #ffcdd2;
	}

	.success-message {
		background: #e8f5e9;
		color: #2e7d32;
		border: 1px solid #c8e6c9;
	}

	.hidden {
		display: none;
		opacity: 0;
	}

	.loading {
		opacity: 0.7;
		pointer-events: none;
	}

	.auth-footer {
		margin-top: 20px;
	}

	.auth-footer a {
		color: #4caf50;
		text-decoration: none;
	}

	.auth-footer a:hover {
		text-decoration: underline;
	}

	@media (prefers-reduced-motion: reduce) {
		* {
			transition: none !important;
		}
	}
</style>

<script>
	import { auth } from '../firebase';

	// Get DOM elements
	const form = document.getElementById('signup-form') as HTMLFormElement;
	const errorMessage = document.getElementById('error-message') as HTMLDivElement;
	const successMessage = document.getElementById('success-message') as HTMLDivElement;
	const emailInput = document.getElementById('email') as HTMLInputElement;
	const passwordInput = document.getElementById('password') as HTMLInputElement;
	const usernameInput = document.getElementById('username') as HTMLInputElement;

	// Auth state observer
	auth.onAuthStateChanged((user) => {
		if (user) {
			window.location.href = '/dashboard';
		}
	});

	function showMessage(element: HTMLElement | null, message: string): void {
		if (!element) return;
		element.textContent = message;
		element.classList.remove('hidden');
		element.style.opacity = '1';
		setTimeout(() => {
			element.style.opacity = '0';
			setTimeout(() => {
				element.classList.add('hidden');
			}, 300);
		}, 5000);
	}

	function setLoading(isLoading: boolean): void {
		const buttons = document.querySelectorAll<HTMLButtonElement>('button');
		const inputs = document.querySelectorAll<HTMLInputElement>('input');
		
		buttons.forEach(button => {
			button.disabled = isLoading;
			button.classList.toggle('loading', isLoading);
		});

		inputs.forEach(input => {
			input.disabled = isLoading;
			input.classList.toggle('loading', isLoading);
		});
	}

	function validateEmail(email: string): boolean {
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
		return emailRegex.test(email);
	}

	function validatePassword(password: string): boolean {
		return password.length >= 8;
	}

	// Email/Password Sign Up
	form?.addEventListener('submit', async (e: Event) => {
		e.preventDefault();
		
		// Get and validate form inputs
		const formData = {
			email: emailInput?.value.trim(),
			password: passwordInput?.value,
			username: usernameInput?.value.trim()
		};

		// Validate all fields are present
		if (Object.values(formData).some(value => !value)) {
			showMessage(errorMessage, 'Please fill in all fields');
			return;
		}

		// Validate email and password format
		if (!validateEmail(formData.email)) {
			showMessage(errorMessage, 'Please enter a valid email address');
			return;
		}

		if (!validatePassword(formData.password)) {
			showMessage(errorMessage, 'Password must be at least 8 characters long');
			return;
		}

		setLoading(true);

		try {
			// Create user account
			const userCredential = await auth.createUserWithEmailAndPassword(
				formData.email, 
				formData.password
			);
			
			if (userCredential.user) {
				// Update profile with username
				await userCredential.user.updateProfile({
					displayName: formData.username
				});
				
				showMessage(successMessage, 'Account created successfully!');
				
				// Reset form
				[emailInput, passwordInput, usernameInput].forEach(input => {
					if (input) input.value = '';
				});

				// Redirect after delay
				setTimeout(() => window.location.href = '/dashboard', 1500);
			}
		} catch (error: any) {
			console.error('Email/Password sign up error:', error);
			
			// Map error codes to user-friendly messages
			const errorMessages = {
				'auth/email-already-in-use': 'This email is already registered',
				'auth/invalid-email': 'Invalid email address',
				'auth/weak-password': 'Password is too weak',
				'auth/network-request-failed': 'Network error. Please check your connection'
			};
			
			showMessage(errorMessage, errorMessages[error.code] || 'Failed to create account');
		} finally {
			setLoading(false);
		}
	});

	// Handle OAuth Sign Up (Google & Apple)
	const handleOAuthSignUp = async (providerName: 'Google' | 'Apple') => {
		setLoading(true);
		try {
			const provider = providerName === 'Google' 
				? new auth.GoogleAuthProvider()
				: new auth.OAuthProvider('apple.com');

			// Add required scopes
			provider.addScope('email');
			provider.addScope(providerName === 'Google' ? 'profile' : 'name');
			
			const result = await auth.signInWithPopup(provider);
			if (!result.user) throw new Error('No user data returned');
			
			showMessage(successMessage, `Successfully signed up with ${providerName}!`);
			setTimeout(() => window.location.href = '/dashboard', 1500);
			
		} catch (error: any) {
			console.error(`${providerName} sign up error:`, error);
			
			// Map common OAuth error codes to user-friendly messages
			const errorMessages = {
				'auth/popup-closed-by-user': 'Sign up cancelled',
				'auth/popup-blocked': `Please enable popups to sign up with ${providerName}`,
				'auth/account-exists-with-different-credential': 'An account already exists with this email',
				'auth/network-request-failed': 'Network error. Please check your connection',
				'auth/operation-not-allowed': `${providerName} sign up is not enabled`,
				'auth/invalid-oauth-provider': `${providerName} sign in is not configured correctly`
			};
			
			showMessage(errorMessage, errorMessages[error.code] || `Failed to sign up with ${providerName}`);
		} finally {
			setLoading(false);
		}
	};

	// Attach OAuth click handlers
	document.getElementById('google-sign-up')?.addEventListener('click', () => handleOAuthSignUp('Google'));
	document.getElementById('apple-sign-up')?.addEventListener('click', () => handleOAuthSignUp('Apple'));
</script>