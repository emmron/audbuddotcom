---
// Remove imports from frontmatter since they're not needed here
---

<div class="auth-container">
	<section id="sign-in">
		<h2>Welcome Back</h2>
		<p class="subtitle">Sign in to access your account</p>
		
		<form id="signin-form">
			<div class="input-group">
				<label for="email">Email:</label>
				<input type="email" id="email" name="email" required placeholder="Enter your email" />
			</div>
			
			<div class="input-group">
				<label for="password">Password:</label>
				<input type="password" id="password" name="password" required placeholder="Enter your password" />
			</div>
			
			<button type="submit" class="primary-button">Sign In</button>
		</form>

		<div class="divider">
			<span>or continue with</span>
		</div>

		<div class="social-buttons">
			<button id="google-sign-in" class="social-button">
				<img src="/google-icon.svg" alt="Google" width="20" height="20" />
				Sign in with Google
			</button>

			<button id="apple-sign-in" class="social-button">
				<img src="/apple-icon.svg" alt="Apple" width="20" height="20" />
				Sign in with Apple
			</button>
		</div>

		<p class="auth-footer">
			Don't have an account? <a href="/signup">Sign up</a>
		</p>

		<div id="error-message" class="error-message hidden"></div>
		<div id="success-message" class="success-message hidden"></div>
	</section>
</div>

<style>
	.auth-container {
		min-height: calc(100vh - 80px);
		display: flex;
		align-items: center;
		justify-content: center;
		padding: 2rem;
		background: linear-gradient(135deg, rgba(76, 175, 80, 0.08), rgba(44, 62, 80, 0.08));
	}

	#sign-in {
		width: 100%;
		max-width: 400px;
		padding: 3rem;
		background: white;
		border-radius: 20px;
		box-shadow: 
			0 10px 40px rgba(0, 0, 0, 0.08),
			0 4px 12px rgba(0, 0, 0, 0.05);
	}

	h2 {
		color: #1a2a3a;
		font-size: 2.25em;
		margin-bottom: 0.5rem;
		text-align: center;
		font-weight: 800;
		letter-spacing: -0.02em;
	}

	.subtitle {
		color: #64748b;
		text-align: center;
		margin-bottom: 2.5rem;
		font-size: 1.1em;
		line-height: 1.5;
	}

	.input-group {
		margin-bottom: 1.75rem;
	}

	label {
		display: block;
		margin-bottom: 0.5rem;
		color: #334155;
		font-weight: 600;
		font-size: 0.95em;
	}

	input {
		width: 100%;
		padding: 1rem;
		border: 2px solid #e2e8f0;
		border-radius: 12px;
		transition: all 0.2s ease;
		font-size: 1em;
		background: #f8fafc;
	}

	input:focus {
		outline: none;
		border-color: #4caf50;
		box-shadow: 0 0 0 4px rgba(76, 175, 80, 0.15);
		background: white;
	}

	.primary-button {
		width: 100%;
		padding: 1rem;
		background: linear-gradient(135deg, #4caf50, #2e7d32);
		color: white;
		border: none;
		border-radius: 12px;
		font-weight: 600;
		font-size: 1.05em;
		cursor: pointer;
		transition: all 0.2s ease;
	}

	.primary-button:hover {
		background: linear-gradient(135deg, #43a047, #2e7d32);
		transform: translateY(-2px);
		box-shadow: 0 6px 20px rgba(76, 175, 80, 0.25);
	}

	.divider {
		text-align: center;
		margin: 2.5rem 0;
		position: relative;
	}

	.divider::before,
	.divider::after {
		content: "";
		position: absolute;
		top: 50%;
		width: 45%;
		height: 1px;
		background: #e2e8f0;
	}

	.divider::before { left: 0; }
	.divider::after { right: 0; }

	.divider span {
		background: white;
		padding: 0 1.25rem;
		color: #64748b;
		font-size: 0.95em;
		font-weight: 500;
	}

	.social-buttons {
		display: grid;
		gap: 1rem;
	}

	.social-button {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 0.875rem;
		padding: 1rem;
		background: white;
		border: 2px solid #e2e8f0;
		border-radius: 12px;
		font-weight: 600;
		font-size: 1em;
		color: #334155;
		cursor: pointer;
		transition: all 0.2s ease;
	}

	.social-button:hover {
		background: #f8fafc;
		transform: translateY(-2px);
		box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
		border-color: #cbd5e1;
	}

	.auth-footer {
		margin-top: 2.5rem;
		text-align: center;
		color: #64748b;
		font-size: 1em;
	}

	.auth-footer a {
		color: #4caf50;
		text-decoration: none;
		font-weight: 600;
		transition: all 0.2s ease;
	}

	.auth-footer a:hover {
		color: #2e7d32;
		text-decoration: underline;
	}

	@media (max-width: 480px) {
		.auth-container {
			padding: 1rem;
		}

		#sign-in {
			padding: 2rem;
		}
	}

	.error-message, .success-message {
		padding: 1rem;
		border-radius: 12px;
		margin: 1.25rem 0;
		text-align: center;
		opacity: 0;
		transition: all 0.3s ease;
		font-weight: 500;
		line-height: 1.5;
	}

	.error-message {
		background: #fef2f2;
		color: #b91c1c;
		border: 1px solid #fee2e2;
	}

	.success-message {
		background: #f0fdf4;
		color: #166534;
		border: 1px solid #dcfce7;
	}

	.hidden {
		display: none;
		opacity: 0;
	}

	.loading {
		opacity: 0.7;
		pointer-events: none;
		cursor: not-allowed;
	}

	button:disabled {
		opacity: 0.7;
		cursor: not-allowed;
	}
</style>

<script>
	import { 
		auth, 
		GoogleAuthProvider, 
		signInWithPopup, 
		OAuthProvider,
		signInWithEmailAndPassword,
		onAuthStateChanged,
		type User 
	} from '../firebase';

	const form = document.getElementById('signin-form');
	const errorMessage = document.getElementById('error-message');
	const successMessage = document.getElementById('success-message');

	// Auth state observer
	onAuthStateChanged(auth, (user: User | null) => {
		if (user) {
			window.location.href = '/dashboard';
		}
	});

	function showMessage(element: HTMLElement | null, message: string) {
		if (!element) return;
		element.textContent = message;
		element.classList.remove('hidden');
		element.style.opacity = '1';
		setTimeout(() => {
			element.style.opacity = '0';
			setTimeout(() => {
				element.classList.add('hidden');
			}, 300);
		}, 5000);
	}

	function setLoading(isLoading: boolean) {
		const formElements = document.querySelectorAll<HTMLElement>('button, input');
		
		formElements.forEach(element => {
			if (element instanceof HTMLButtonElement || element instanceof HTMLInputElement) {
				element.disabled = isLoading;
				element.classList.toggle('loading', isLoading);
			}
		});
	}

	// Email/Password Sign In
	form?.addEventListener('submit', async (e) => {
		e.preventDefault();
		
		if (!form || !errorMessage || !successMessage) {
			console.error('Required DOM elements not found');
			return;
		}

		setLoading(true);

		const emailInput = document.getElementById('email') as HTMLInputElement;
		const passwordInput = document.getElementById('password') as HTMLInputElement;

		if (!emailInput || !passwordInput) {
			showMessage(errorMessage, 'Form inputs not found');
			setLoading(false);
			return;
		}

		const email = emailInput.value.trim();
		const password = passwordInput.value;

		// Enhanced validation
		if (!email || !password) {
			showMessage(errorMessage, 'Please fill in all fields');
			setLoading(false);
			return;
		}

		// Email format validation
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
		if (!emailRegex.test(email)) {
			showMessage(errorMessage, 'Please enter a valid email address');
			setLoading(false);
			return;
		}

		// Password length check
		if (password.length < 6) {
			showMessage(errorMessage, 'Password must be at least 6 characters');
			setLoading(false);
			return;
		}

		try {
			const currentAuth = auth;
			if (!currentAuth) {
				throw new Error('Authentication not initialized');
			}

			const userCredential = await signInWithEmailAndPassword(currentAuth, email, password);
			const user = userCredential.user;
			
			if (!user) {
				throw new Error('No user data returned');
			}

			showMessage(successMessage, 'Successfully signed in!');
			
			// Clear form and redirect
			emailInput.value = passwordInput.value = '';
			
			// Ensure redirect only happens if still signed in
			const redirectTimeout = setTimeout(() => {
				const unsubscribe = onAuthStateChanged(currentAuth, (currentUser) => {
					if (currentUser) {
						window.location.href = '/dashboard';
					}
					unsubscribe(); // Clean up listener
				});
			}, 1500);

			// Cleanup timeout if component unmounts
			return () => clearTimeout(redirectTimeout);

		} catch (error: any) {
			console.error('Email sign in error:', error);
			const errorMessages: Record<string, string> = {
				'auth/invalid-credential': 'Invalid email or password',
				'auth/user-disabled': 'This account has been disabled',
				'auth/user-not-found': 'No account found with this email',
				'auth/too-many-requests': 'Too many failed attempts. Please try again later',
				'auth/network-request-failed': 'Network error. Please check your connection',
				'auth/invalid-email': 'Invalid email format',
				'auth/wrong-password': 'Incorrect password'
			};
			showMessage(errorMessage, errorMessages[error.code] || 'Failed to sign in');
		} finally {
			setLoading(false);
		}
	});

	// Handle OAuth sign in (Google & Apple)
	async function handleOAuthSignIn(providerId: 'google.com' | 'apple.com') {
		setLoading(true);
		
		const currentAuth = auth;
		if (!currentAuth) {
			showMessage(errorMessage, 'Authentication not initialized');
			setLoading(false);
			return;
		}

		try {
			const provider = providerId === 'google.com' 
				? new GoogleAuthProvider()
				: new OAuthProvider('apple.com');

			// Add appropriate scopes
			provider.addScope('email');
			if (providerId === 'google.com') {
				provider.addScope('profile');
				provider.setCustomParameters({
					prompt: 'select_account'
				});
			} else {
				provider.addScope('name');
			}
			
			const result = await signInWithPopup(currentAuth, provider);
			const user = result.user;
			
			if (!user) {
				throw new Error('No user data returned');
			}
			
			showMessage(successMessage, `Successfully signed in with ${providerId === 'google.com' ? 'Google' : 'Apple'}!`);
			
			const redirectTimeout = setTimeout(() => {
				const unsubscribe = onAuthStateChanged(currentAuth, (currentUser) => {
					if (currentUser) {
						window.location.href = '/dashboard';
					}
					unsubscribe(); // Clean up listener
				});
			}, 1500);

			return () => clearTimeout(redirectTimeout);
			
		} catch (error: any) {
			console.error(`${providerId} sign in error:`, error);
			const errorMessages: Record<string, string> = {
				'auth/popup-closed-by-user': 'Sign in cancelled',
				'auth/popup-blocked': `Please enable popups to sign in with ${providerId === 'google.com' ? 'Google' : 'Apple'}`,
				'auth/account-exists-with-different-credential': 'An account already exists with this email',
				'auth/network-request-failed': 'Network error. Please check your connection',
				'auth/invalid-oauth-provider': 'OAuth provider is not configured correctly',
				'auth/operation-not-allowed': 'This sign in method is not enabled',
				'auth/user-disabled': 'This account has been disabled'
			};
			showMessage(errorMessage, errorMessages[error.code] || `Failed to sign in with ${providerId === 'google.com' ? 'Google' : 'Apple'}`);
		} finally {
			setLoading(false);
		}
	}

	// Add click handlers for OAuth buttons with error boundaries
	const googleButton = document.getElementById('google-sign-in');
	const appleButton = document.getElementById('apple-sign-in');

	googleButton?.addEventListener('click', () => handleOAuthSignIn('google.com'));
	appleButton?.addEventListener('click', () => handleOAuthSignIn('apple.com'));
</script>