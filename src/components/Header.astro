---
const currentPath = Astro.url.pathname;
---

<header>
	<div class="header-content">
		<a href="/" class="logo-link" aria-label="Medicinal Cannabis Reviews - Home">
			<h1 class="site-title">Medicinal Cannabis Reviews</h1>
		</a>
		<nav aria-label="Main navigation">
			<div class="nav-links" id="nav-links">
				<a href="/strains" class={currentPath === '/strains' ? 'active' : ''} aria-current={currentPath === '/strains' ? 'page' : undefined}>
					<span class="icon" aria-hidden="true">üåø</span>
					<span>Strains</span>
				</a>
				<a href="/community" class={currentPath === '/community' ? 'active' : ''} aria-current={currentPath === '/community' ? 'page' : undefined}>
					<span class="icon" aria-hidden="true">üë•</span>
					<span>Community</span>
				</a>
				<a href="https://cannabisreviews.com/blog" rel="noopener">
					<span class="icon" aria-hidden="true">üìù</span>
					<span>Blog</span>
				</a>
			</div>
			<div class="auth-buttons" role="navigation" aria-label="User authentication">
				<a href="/signin" class="auth-button">Sign In</a>
				<a href="/signup" class="auth-button highlight">Sign Up</a>
			</div>
			<button 
				class="mobile-menu-button" 
				aria-label="Toggle menu" 
				aria-expanded="false" 
				aria-controls="nav-links"
				aria-haspopup="true"
			>
				<span class="bar"></span>
				<span class="bar"></span>
				<span class="bar"></span>
			</button>
		</nav>
	</div>
</header>

<style>
	/* Core Layout */
	header {
		background: #ffffff;
		padding: 1rem;
		position: sticky;
		top: 0;
		z-index: 1000;
		box-shadow: 0 4px 20px rgba(0,0,0,0.06);
		border-bottom: 1px solid rgba(229, 231, 235, 0.8);
	}

	.header-content {
		max-width: 1200px;
		margin: 0 auto;
		display: flex;
		justify-content: space-between;
		align-items: center;
		height: 4rem;
	}

	/* Logo */
	.logo-link {
		text-decoration: none;
		padding: 0.75rem 1rem;
		border-radius: 12px;
		transition: all 0.3s ease;
	}

	.logo-link:hover {
		background: rgba(79, 70, 229, 0.08);
		transform: translateY(-1px);
	}

	.site-title {
		margin: 0;
		font-size: 1.625rem;
		font-weight: 800;
		color: #1F2937;
		letter-spacing: -0.03em;
		background: linear-gradient(135deg, #4F46E5, #7C3AED);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
	}

	/* Navigation */
	nav {
		display: flex;
		align-items: center;
		gap: 2.5rem;
	}

	.nav-links {
		display: flex;
		align-items: center;
		gap: 0.75rem;
	}

	nav a {
		color: #4B5563;
		text-decoration: none;
		font-size: 1.0625rem;
		font-weight: 500;
		padding: 0.875rem 1.25rem;
		border-radius: 12px;
		transition: all 0.3s ease;
		display: flex;
		align-items: center;
		gap: 0.625rem;
	}

	nav a:not(.auth-button):hover {
		color: #1F2937;
		background: rgba(79, 70, 229, 0.08);
		transform: translateY(-1px);
	}

	.icon {
		font-size: 1.375rem;
		opacity: 0.9;
		transition: all 0.3s ease;
	}

	nav a:hover .icon {
		opacity: 1;
		transform: scale(1.1);
	}

	.active {
		color: #4F46E5 !important;
		background: rgba(79, 70, 229, 0.08);
		font-weight: 600;
	}

	/* Auth Section */
	.auth-buttons {
		display: flex;
		gap: 1rem;
		margin-left: 2.5rem;
		padding-left: 2.5rem;
		border-left: 2px solid rgba(229, 231, 235, 0.8);
	}

	.auth-button {
		padding: 0.875rem 1.5rem;
		border-radius: 12px;
		font-weight: 600;
		font-size: 1.0625rem;
		transition: all 0.3s ease;
	}

	.auth-button:not(.highlight) {
		color: #4B5563;
	}

	.auth-button:not(.highlight):hover {
		color: #1F2937;
		background: rgba(79, 70, 229, 0.08);
		transform: translateY(-1px);
	}

	.auth-button.highlight {
		background: linear-gradient(135deg, #4F46E5, #7C3AED);
		color: white;
		box-shadow: 0 4px 12px rgba(79, 70, 229, 0.2);
	}

	.auth-button.highlight:hover {
		transform: translateY(-2px);
		box-shadow: 0 6px 16px rgba(79, 70, 229, 0.3);
	}

	/* Mobile Menu */
	.mobile-menu-button {
		display: none;
		flex-direction: column;
		gap: 6px;
		padding: 0.875rem;
		background: transparent;
		border: none;
		cursor: pointer;
		border-radius: 12px;
		transition: all 0.3s ease;
	}

	.mobile-menu-button:hover {
		background: rgba(79, 70, 229, 0.08);
	}

	.bar {
		width: 26px;
		height: 2px;
		background: #4F46E5;
		transition: transform 0.3s ease;
		border-radius: 4px;
	}

	/* Responsive */
	@media (max-width: 1200px) {
		.header-content {
			padding: 0 2rem;
		}
	}

	@media (max-width: 768px) {
		.nav-links,
		.auth-buttons {
			display: none;
			position: absolute;
			top: 100%;
			left: 0;
			right: 0;
			background: #ffffff;
			padding: 1.25rem;
			flex-direction: column;
			gap: 0.75rem;
			border-bottom: 1px solid rgba(229, 231, 235, 0.8);
			box-shadow: 0 8px 24px rgba(0,0,0,0.08);
		}

		.nav-links.show,
		.auth-buttons.show {
			display: flex;
		}

		.auth-buttons {
			border: none;
			margin: 0;
			padding: 1.25rem;
			background: #F9FAFB;
		}

		.mobile-menu-button {
			display: flex;
		}

		nav a,
		.auth-button {
			width: 100%;
			justify-content: center;
			padding: 1.125rem;
		}

		.auth-button.highlight {
			margin-top: 0.75rem;
		}
	}

	@media (max-width: 480px) {
		.header-content {
			height: 3.75rem;
			padding: 0 1.25rem;
		}
		
		.site-title {
			font-size: 1.375rem;
		}
	}

	@media (prefers-reduced-motion: reduce) {
		* {
			transition: none !important;
		}
	}
</style>
<script>
	// Type definitions for better type safety
	type MenuElements = {
		button: HTMLButtonElement | null;
		navLinks: HTMLElement | null;
		authButtons: HTMLElement | null;
		bars: HTMLElement[];
	};

	type AnimationConfig = {
		readonly open: readonly [string, string, string];
		readonly closed: readonly [string, string, string];
	};

	// Core animation and transition constants
	const ANIMATION = {
		DURATION: 300,
		TIMING: 'cubic-bezier(0.4, 0, 0.2, 1)',
		TRANSFORMS: {
			open: [
				'rotate(45deg) translate(6px, 6px)',
				'scale(0)',
				'rotate(-45deg) translate(6px, -6px)'
			],
			closed: ['none', 'none', 'none']
		} as AnimationConfig
	} as const;

	// Initialize DOM elements with error handling
	function initializeElements(): MenuElements {
		try {
			const button = document.querySelector('.mobile-menu-button') as HTMLButtonElement | null;
			const navLinks = document.querySelector('.nav-links') as HTMLElement | null;
			const authButtons = document.querySelector('.auth-buttons') as HTMLElement | null;
			
			// Convert NodeList to Array and ensure HTMLElement type with validation
			const bars = Array.from(document.querySelectorAll('.bar')).map((el, index) => {
				if (!(el instanceof HTMLElement)) {
					throw new Error(`Bar element at index ${index} is not HTMLElement`);
				}
				return el;
			});

			if (!button || !navLinks || !authButtons) {
				throw new Error('Required menu elements not found');
			}

			if (bars.length !== 3) {
				throw new Error(`Expected 3 bar elements, found ${bars.length}`);
			}

			return { button, navLinks, authButtons, bars };
		} catch (error) {
			console.error('Failed to initialize menu elements:', error instanceof Error ? error.message : 'Unknown error');
			// Return safe default state
			return {
				button: null,
				navLinks: null,
				authButtons: null,
				bars: []
			};
		}
	}

	// Enhanced hamburger animation with error boundaries and validation
	function animateHamburger(elements: MenuElements, isOpen: boolean): void {
		try {
			if (elements.bars.length !== 3) {
				throw new Error('Invalid number of bar elements');
			}

			elements.bars.forEach((bar, index) => {
				if (!bar || !(bar instanceof HTMLElement)) {
					throw new Error(`Invalid bar element at index ${index}`);
				}

				const transition = `transform ${ANIMATION.DURATION}ms ${ANIMATION.TIMING}, opacity ${ANIMATION.DURATION}ms ${ANIMATION.TIMING}`;
				const transform = ANIMATION.TRANSFORMS[isOpen ? 'open' : 'closed'][index];
				const opacity = isOpen && index === 1 ? '0' : '1';

				requestAnimationFrame(() => {
					try {
						bar.style.transition = transition;
						bar.style.transform = transform;
						bar.style.opacity = opacity;
					} catch (err) {
						console.error(`Failed to animate bar ${index}:`, err);
					}
				});
			});
		} catch (error) {
			console.error('Error in hamburger animation:', error instanceof Error ? error.message : 'Unknown error');
		}
	}

	// Accessibility announcer utility with ARIA live region and validation
	function announceToScreenReader(message: string): void {
		if (!message || typeof message !== 'string') {
			console.warn('Invalid message for screen reader announcement');
			return;
		}

		try {
			const ariaLive = document.createElement('div');
			ariaLive.setAttribute('aria-live', 'polite');
			ariaLive.setAttribute('aria-atomic', 'true');
			ariaLive.className = 'sr-only';
			ariaLive.textContent = message;
			
			document.body.appendChild(ariaLive);

			const timeoutId = setTimeout(() => {
				if (document.body.contains(ariaLive)) {
					document.body.removeChild(ariaLive);
				}
			}, ANIMATION.DURATION + 700);

			// Cleanup on navigation
			window.addEventListener('beforeunload', () => {
				clearTimeout(timeoutId);
				if (document.body.contains(ariaLive)) {
					document.body.removeChild(ariaLive);
				}
			}, { once: true });

		} catch (error) {
			console.error('Screen reader announcement failed:', error instanceof Error ? error.message : 'Unknown error');
		}
	}

	// Core menu state handler
	function handleMenuState(elements: MenuElements, open: boolean): void {
		if (!elements?.button || !elements?.navLinks || !elements?.authButtons || typeof open !== 'boolean') {
			throw new Error('Invalid menu state parameters');
		}

		const { button, navLinks, authButtons } = elements;

		// Update button state
		button.setAttribute('aria-expanded', String(open));
		button.setAttribute('aria-label', `${open ? 'Close' : 'Open'} menu`);

		// Batch all animations in a single frame
		requestAnimationFrame(() => {
			const transition = `opacity ${ANIMATION.DURATION}ms ${ANIMATION.TIMING}, transform ${ANIMATION.DURATION}ms ${ANIMATION.TIMING}`;
			
			// Update menu elements
			[navLinks, authButtons].forEach(element => {
				if (element instanceof HTMLElement) {
					element.style.transition = transition;
					element.classList.toggle('show', open);
				}
			});

			// Update hamburger icon
			animateHamburger(elements, open);

			// Update body state
			document.body.style.overflow = open ? 'hidden' : '';
			document.body.classList.toggle('menu-open', open);
		});

		// Announce state change
		announceToScreenReader(open ? 'Menu opened' : 'Menu closed');
	}

	// Menu initialization and event management
	function initializeMenu(): void {
		const elements = initializeElements();
		if (!elements?.button) {
			throw new Error('Menu initialization failed: button not found');
		}

		// State management
		let isProcessing = false;
		const DEBOUNCE_TIME = 200;

		// Menu click handler
		function handleClick(e: Event): void {
			if (isProcessing) return;
			
			isProcessing = true;
			e.stopPropagation();

			const isCurrentlyOpen = elements.button?.getAttribute('aria-expanded') === 'true';
			handleMenuState(elements, !isCurrentlyOpen);

			setTimeout(() => { isProcessing = false; }, DEBOUNCE_TIME);
		}

		// Outside click detection
		function handleOutsideClick(e: MouseEvent): void {
			if (isProcessing) return;

			const target = e.target as Node;
			const isMenuOpen = elements.navLinks?.classList.contains('show');
			const menuElements = [elements.button, elements.navLinks, elements.authButtons];
			const isClickInside = menuElements.some(el => el?.contains(target));

			if (isMenuOpen && !isClickInside) {
				handleMenuState(elements, false);
			}
		}

		// Keyboard navigation
		function handleKeydown(e: KeyboardEvent): void {
			if (e.key === 'Escape' && elements.navLinks?.classList.contains('show')) {
				handleMenuState(elements, false);
			}
		}

		// Resource cleanup
		function cleanup(): void {
			document.body.style.overflow = '';
			document.body.classList.remove('menu-open');
			elements.button?.removeEventListener('click', handleClick);
			document.removeEventListener('click', handleOutsideClick);
			document.removeEventListener('keydown', handleKeydown);
		}

		// Event binding
		elements.button.addEventListener('click', handleClick);
		document.addEventListener('click', handleOutsideClick);
		document.addEventListener('keydown', handleKeydown);
		window.addEventListener('beforeunload', cleanup, { once: true });

		// Error boundary
		window.addEventListener('error', (e) => {
			cleanup();
			console.error('Menu system error:', e.error);
		});
	}

	// Initialize menu system
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initializeMenu);
	} else {
		initializeMenu();
	}
</script>