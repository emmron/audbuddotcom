---
import Header from './Header.astro';
---

<Header />
<main class="community-container">
    <section class="hero">
        <h1>Cannabis Community</h1>
        <p>Connect with other medicinal cannabis patients and share experiences</p>
        <div class="search-bar">
            <input type="search" id="search-input" placeholder="Search discussions..." />
            <button id="search-button">Search</button>
        </div>
    </section>

    <div class="content-grid">
        <section class="discussions">
            <div class="section-header">
                <h2>Popular Discussions</h2>
                <button id="new-discussion-btn" class="new-discussion">Start Discussion</button>
            </div>
            <div id="discussion-cards" class="discussion-cards">
                <div class="loading">Loading discussions...</div>
            </div>
        </section>

        <!-- New Discussion Modal -->
        <div id="new-discussion-modal" class="modal hidden">
            <div class="modal-content">
                <h2>Start a New Discussion</h2>
                <form id="new-discussion-form">
                    <div class="input-group">
                        <label for="author-name">Your Name (optional)</label>
                        <input type="text" id="author-name" placeholder="Anonymous" maxlength="30">
                    </div>
                    <div class="input-group">
                        <label for="discussion-title">Title</label>
                        <input type="text" id="discussion-title" required minlength="5" maxlength="100">
                    </div>
                    <div class="input-group">
                        <label for="discussion-category">Category</label>
                        <select id="discussion-category" required>
                            <option value="treatment">Treatment</option>
                            <option value="reviews">Reviews</option>
                            <option value="questions">Questions</option>
                            <option value="general">General</option>
                        </select>
                    </div>
                    <div class="input-group">
                        <label for="discussion-content">Content</label>
                        <textarea id="discussion-content" required minlength="20" maxlength="2000"></textarea>
                    </div>
                    <div class="button-group">
                        <button type="button" id="cancel-discussion" class="secondary-button">Cancel</button>
                        <button type="submit" class="primary-button">Post Discussion</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</main>

<style>
    /* Base styles with increased accessibility */
    :root {
        --primary-color: #4caf50;
        --primary-dark: #388e3c;
        --text-primary: #1a1a1a;
        --text-secondary: #4a4a4a;
        --background-light: #ffffff;
        --focus-outline: 3px solid #4caf50;
        --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    /* High contrast mode support */
    @media (prefers-contrast: high) {
        :root {
            --primary-color: #006400;
            --primary-dark: #004d00;
            --text-primary: #000000;
            --text-secondary: #1a1a1a;
        }
    }

    .community-container {
        padding: 2rem;
        max-width: 1200px;
        margin: 0 auto;
        min-height: calc(100vh - 4rem);
    }

    /* Enhanced focus states for keyboard navigation */
    *:focus {
        outline: var(--focus-outline);
        outline-offset: 2px;
    }

    /* Reduced motion preference support */
    @media (prefers-reduced-motion: reduce) {
        * {
            animation: none !important;
            transition: none !important;
        }
    }

    .hero {
        text-align: center;
        padding: 4rem 2rem;
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.97), rgba(255, 255, 255, 0.92));
        border-radius: 20px;
        margin-bottom: 3rem;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
    }

    .hero h1 {
        font-size: clamp(2rem, 5vw, 3.5rem);
        color: var(--text-primary);
        margin-bottom: 1rem;
        font-weight: 800;
        line-height: 1.2;
    }

    .hero p {
        font-size: clamp(1.1rem, 2vw, 1.4rem);
        color: var(--text-secondary);
        max-width: 600px;
        margin: 0 auto;
        line-height: 1.6;
    }

    .search-bar {
        margin: 2.5rem auto 0;
        display: flex;
        justify-content: center;
        gap: 1rem;
        max-width: 700px;
        padding: 0 1rem;
    }

    .search-bar input {
        padding: 1rem 1.5rem;
        width: 100%;
        border: 2px solid rgba(0, 0, 0, 0.1);
        border-radius: 30px;
        font-size: 1.1rem;
        transition: var(--transition-smooth);
        background-color: var(--background-light);
    }

    .search-bar input:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
    }

    /* ARIA-friendly button styles */
    button {
        font-size: 1.1rem;
        font-weight: 600;
        padding: 1rem 2rem;
        cursor: pointer;
        border: none;
        border-radius: 30px;
        background: var(--primary-color);
        color: white;
        transition: var(--transition-smooth);
        position: relative;
        overflow: hidden;
    }

    button:hover {
        background: var(--primary-dark);
    }

    button:focus-visible {
        outline: var(--focus-outline);
        outline-offset: 2px;
    }

    /* Improved card accessibility */
    .card {
        background: var(--background-light);
        padding: 2rem;
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);
        margin-bottom: 1.5rem;
        border: 2px solid transparent;
        transition: var(--transition-smooth);
    }

    .card:hover,
    .card:focus-within {
        border-color: var(--primary-color);
        transform: translateY(-4px);
    }

    /* Form accessibility improvements */
    .input-group {
        margin-bottom: 1.5rem;
    }

    .input-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 1.1rem;
        font-weight: 500;
        color: var(--text-primary);
    }

    .input-group input,
    .input-group select,
    .input-group textarea {
        width: 100%;
        padding: 1rem;
        border: 2px solid rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        font-size: 1rem;
        line-height: 1.5;
        transition: var(--transition-smooth);
    }

    .input-group input:focus,
    .input-group select:focus,
    .input-group textarea:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
    }

    /* Error states */
    .error {
        color: #dc3545;
        font-size: 1rem;
        margin-top: 0.5rem;
        padding: 0.5rem;
        border-radius: 4px;
        background-color: rgba(220, 53, 69, 0.1);
    }

    /* Loading state with better visibility */
    .loading {
        text-align: center;
        padding: 2rem;
        color: var(--text-secondary);
        font-size: 1.2rem;
        background: rgba(0, 0, 0, 0.05);
        border-radius: 8px;
    }

    /* Modal accessibility improvements */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        padding: 1rem;
    }

    .modal-content {
        background: var(--background-light);
        padding: 2.5rem;
        border-radius: 16px;
        width: 100%;
        max-width: 600px;
        max-height: 90vh;
        overflow-y: auto;
        position: relative;
    }

    /* Responsive improvements */
    @media (max-width: 768px) {
        .community-container {
            padding: 1rem;
        }

        .content-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .search-bar {
            flex-direction: column;
        }

        .modal-content {
            padding: 1.5rem;
            margin: 1rem;
        }

        button {
            width: 100%;
            margin-bottom: 0.5rem;
        }
    }

    /* Screen reader only text */
    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        border: 0;
    }

    .hidden {
        display: none;
    }
</style>

<script>
    interface Discussion {
        id: string;
        title: string;
        category: string;
        content: string;
        authorName: string;
        createdAt: Date;
        likes: number;
        comments: number;
    }

    // Mock data store with proper typing
    let discussions: Discussion[] = [];
    
    const discussionCards = document.getElementById('discussion-cards');
    const newDiscussionBtn = document.getElementById('new-discussion-btn');
    const modal = document.getElementById('new-discussion-modal');
    const form = document.getElementById('new-discussion-form') as HTMLFormElement | null;
    const cancelBtn = document.getElementById('cancel-discussion');

    // Error handling utility
    const handleError = (error: unknown, context: string) => {
        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
        console.error(`${context}:`, errorMessage);
        // Show error to user
        const errorAlert = document.createElement('div');
        errorAlert.setAttribute('role', 'alert');
        errorAlert.className = 'error-message';
        errorAlert.textContent = 'An error occurred. Please try again.';
        document.body.appendChild(errorAlert);
        setTimeout(() => errorAlert.remove(), 5000);
    };

    // Show modal with error handling
    newDiscussionBtn?.addEventListener('click', () => {
        try {
            modal?.classList.remove('hidden');
            // Set focus to first input when modal opens
            setTimeout(() => {
                document.getElementById('discussion-title')?.focus();
            }, 100);
        } catch (error) {
            handleError(error, 'Error showing modal');
        }
    });

    // Hide modal with error handling
    cancelBtn?.addEventListener('click', () => {
        try {
            modal?.classList.add('hidden');
            newDiscussionBtn?.focus();
        } catch (error) {
            handleError(error, 'Error hiding modal');
        }
    });

    // Handle form submission with proper validation and error handling
    form?.addEventListener('submit', async (e) => {
        e.preventDefault();

        try {
            const authorNameInput = document.getElementById('author-name') as HTMLInputElement;
            const titleInput = document.getElementById('discussion-title') as HTMLInputElement;
            const categoryInput = document.getElementById('discussion-category') as HTMLSelectElement;
            const contentInput = document.getElementById('discussion-content') as HTMLTextAreaElement;

            if (!authorNameInput || !titleInput || !categoryInput || !contentInput) {
                throw new Error('Required form elements not found');
            }

            // Input validation
            if (titleInput.value.trim().length < 5) {
                throw new Error('Title must be at least 5 characters long');
            }

            if (contentInput.value.trim().length < 10) {
                throw new Error('Content must be at least 10 characters long');
            }

            const newDiscussion: Discussion = {
                id: crypto.randomUUID(),
                title: titleInput.value.trim(),
                category: categoryInput.value,
                content: contentInput.value.trim(),
                authorName: authorNameInput.value.trim() || 'Anonymous',
                createdAt: new Date(),
                likes: 0,
                comments: 0
            };

            // Add to local array
            discussions.unshift(newDiscussion);

            // Save to localStorage for persistence
            localStorage.setItem('discussions', JSON.stringify(discussions));

            modal?.classList.add('hidden');
            form.reset();
            
            // Success message
            const successMsg = document.createElement('div');
            successMsg.setAttribute('role', 'alert');
            successMsg.className = 'success-message';
            successMsg.textContent = 'Discussion posted successfully';
            document.body.appendChild(successMsg);
            setTimeout(() => successMsg.remove(), 3000);

            renderDiscussions();

        } catch (error) {
            handleError(error, 'Error posting discussion');
        }
    });

    // Load saved discussions from localStorage
    try {
        const savedDiscussions = localStorage.getItem('discussions');
        if (savedDiscussions) {
            const parsed = JSON.parse(savedDiscussions);
            discussions = parsed.map((d: any) => ({
                ...d,
                createdAt: new Date(d.createdAt)
            }));
        } else {
            // Initial mock data if no saved discussions
            discussions = [
                {
                    id: crypto.randomUUID(),
                    title: 'Welcome to the Community',
                    category: 'general',
                    content: 'This is our first community post. Feel free to share your experiences and ask questions!',
                    authorName: 'Admin',
                    createdAt: new Date(Date.now() - 86400000),
                    likes: 5,
                    comments: 2
                }
            ];
        }
    } catch (error) {
        handleError(error, 'Error loading saved discussions');
    }

    // Render discussions with error handling
    function renderDiscussions() {
        if (!discussionCards) return;

        try {
            discussionCards.innerHTML = '';
            
            if (discussions.length === 0) {
                discussionCards.innerHTML = `
                    <div class="no-discussions">
                        <p>No discussions yet. Be the first to start one!</p>
                    </div>
                `;
                return;
            }
            
            discussions.forEach((data) => {
                const timeAgo = getTimeAgo(data.createdAt);
                const truncatedContent = data.content.length > 150 
                    ? `${data.content.substring(0, 150)}...` 
                    : data.content;

                discussionCards.innerHTML += `
                    <article class="card" data-id="${data.id}" tabindex="0">
                        <div class="card-header">
                            <span class="tag" role="status">${data.category}</span>
                            <span class="date" aria-label="Posted ${timeAgo}">${timeAgo}</span>
                        </div>
                        <h3>${data.title}</h3>
                        <p>${truncatedContent}</p>
                        <div class="stats" role="group" aria-label="Post statistics">
                            <span aria-label="Author: ${data.authorName}">👤 ${data.authorName}</span>
                            <span aria-label="${data.likes} likes">❤️ ${data.likes}</span>
                            <span aria-label="${data.comments} comments">💬 ${data.comments}</span>
                        </div>
                    </article>
                `;
            });
        } catch (error) {
            handleError(error, 'Error rendering discussions');
        }
    }

    // Initial render
    renderDiscussions();

    function getTimeAgo(date: Date): string {
        try {
            const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000);
            
            const intervals = [
                { seconds: 31536000, label: 'year' },
                { seconds: 2592000, label: 'month' },
                { seconds: 86400, label: 'day' },
                { seconds: 3600, label: 'hour' },
                { seconds: 60, label: 'minute' },
                { seconds: 1, label: 'second' }
            ];

            for (const interval of intervals) {
                const count = Math.floor(seconds / interval.seconds);
                if (count > 1) {
                    return `${count} ${interval.label}s ago`;
                }
                if (count === 1) {
                    return `1 ${interval.label} ago`;
                }
            }

            return 'just now';
        } catch (error) {
            handleError(error, 'Error calculating time');
            return 'some time ago';
        }
    }
</script>