---
import Header from './Header.astro';

interface Discussion {
    id: string;
    title: string;
    content: string;
    category: string;
    author: string;
    created_at: string;
    likes: number;
    comments: Comment[];
}

interface Comment {
    id: string;
    author: string;
    content: string;
    created_at: string;
    likes: number;
}

// Initial discussions data - will be used if no stored data exists
const defaultDiscussions: Discussion[] = [
    {
        id: crypto.randomUUID(),
        title: 'Best strains for anxiety?',
        content: 'Looking for recommendations on strains that have helped others with anxiety management.',
        category: 'treatment',
        author: 'HealthSeeker',
        created_at: new Date().toISOString(),
        likes: 15,
        comments: [
            {
                id: crypto.randomUUID(),
                author: 'CannabisExpert',
                content: 'High-CBD strains like ACDC or Harlequin are often recommended for anxiety. They provide calming effects without intense psychoactivity.',
                created_at: new Date().toISOString(),
                likes: 8
            }
        ]
    },
    {
        id: crypto.randomUUID(),
        title: 'New Research: Cannabis and Pain Management',
        content: 'Recent study shows promising results for chronic pain treatment using specific cannabinoid combinations.',
        category: 'research',
        author: 'MedResearcher',
        created_at: new Date().toISOString(),
        likes: 23,
        comments: []
    }
];

const categories = [
    { id: 'all', name: 'All Topics', icon: 'üìã', description: 'View all discussions' },
    { id: 'treatment', name: 'Treatment & Methods', icon: 'üíä', description: 'Discuss treatment approaches' },
    { id: 'reviews', name: 'Strain Reviews', icon: '‚≠ê', description: 'Share experiences with specific strains' },
    { id: 'research', name: 'Research & Studies', icon: 'üî¨', description: 'Latest medical cannabis research' },
    { id: 'questions', name: 'Questions & Support', icon: '‚ùì', description: 'Get help from the community' }
];

function getTimeAgo(dateStr: string): string {
    const date = new Date(dateStr);
    const seconds = Math.floor((Date.now() - date.getTime()) / 1000);
    
    const intervals = [
        { seconds: 31536000, label: 'year' },
        { seconds: 2592000, label: 'month' },
        { seconds: 86400, label: 'day' },
        { seconds: 3600, label: 'hour' },
        { seconds: 60, label: 'minute' }
    ];

    for (const interval of intervals) {
        const count = Math.floor(seconds / interval.seconds);
        if (count >= 1) {
            return `${count} ${interval.label}${count > 1 ? 's' : ''} ago`;
        }
    }
    return 'just now';
}
---

<Header />

<main class="community">
    <section class="community__hero">
        <div class="hero-content">
            <h1>Community Discussions</h1>
            <p>Connect, share experiences, and learn from other patients</p>
            <div class="search-wrapper">
                <input 
                    type="search" 
                    id="search-discussions"
                    class="search-input" 
                    placeholder="Search discussions..."
                    aria-label="Search discussions"
                />
                <button class="search-button" aria-label="Search">
                    <span class="search-icon">üîç</span>
                </button>
            </div>
        </div>
    </section>

    <div class="community__layout">
        <aside class="sidebar">
            <nav class="categories" aria-label="Discussion categories">
                <h2>Categories</h2>
                <ul class="category-list">
                    {categories.map(cat => (
                        <li>
                            <button 
                                class="category-btn" 
                                data-category={cat.id}
                                aria-label={cat.description}
                            >
                                <span class="category-icon" aria-hidden="true">{cat.icon}</span>
                                <div class="category-info">
                                    <span class="category-name">{cat.name}</span>
                                    <span class="category-count" id={`count-${cat.id}`}></span>
                                </div>
                            </button>
                        </li>
                    ))}
                </ul>
            </nav>

            <a href="/new-discussion" class="new-post-btn" id="new-post-btn">
                <span class="icon" aria-hidden="true">‚úèÔ∏è</span>
                Start New Discussion
            </a>
        </aside>

        <section class="discussions">
            <div class="discussions__header">
                <div class="view-options">
                    <button class="view-btn active" data-view="list" aria-pressed="true">
                        <span class="icon" aria-hidden="true">üìù</span> List View
                    </button>
                    <button class="view-btn" data-view="grid" aria-pressed="false">
                        <span class="icon" aria-hidden="true">üìë</span> Grid View
                    </button>
                </div>
                <select class="sort-select" aria-label="Sort discussions">
                    <option value="recent">Most Recent</option>
                    <option value="popular">Most Popular</option>
                    <option value="commented">Most Discussed</option>
                </select>
            </div>

            <div class="discussions__list" id="discussions-container">
                <!-- Discussions will be dynamically inserted here -->
            </div>
        </section>
    </div>
</main>

<script>
    interface Discussion {
        id: string;
        title: string;
        content: string;
        category: string;
        author: string;
        created_at: string;
        likes: number;
        comments: Comment[];
    }

    interface Comment {
        id: string;
        author: string;
        content: string;
        created_at: string;
        likes: number;
    }

    class ForumManager {
        private discussions: Discussion[] = [];
        private currentCategory: string = 'all';
        private currentSort: string = 'recent';
        private searchTerm: string = '';

        constructor() {
            this.initializeDiscussions();
            this.setupEventListeners();
        }

        private initializeDiscussions() {
            const stored = localStorage.getItem('forum_discussions');
            this.discussions = stored ? JSON.parse(stored) : defaultDiscussions;
            this.saveDiscussions();
            this.updateUI();
        }

        private saveDiscussions() {
            localStorage.setItem('forum_discussions', JSON.stringify(this.discussions));
            this.updateCategoryCounts();
        }

        private updateCategoryCounts() {
            const counts = new Map();
            this.discussions.forEach(d => {
                counts.set(d.category, (counts.get(d.category) || 0) + 1);
            });

            categories.forEach(cat => {
                const countElement = document.getElementById(`count-${cat.id}`);
                if (countElement) {
                    const count = cat.id === 'all' ? this.discussions.length : (counts.get(cat.id) || 0);
                    countElement.textContent = `${count} discussions`;
                }
            });
        }

        private setupEventListeners() {
            // Category filtering
            document.querySelectorAll('.category-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const category = (e.currentTarget as HTMLElement).dataset.category || 'all';
                    this.filterByCategory(category);
                });
            });

            // Search
            const searchInput = document.getElementById('search-discussions') as HTMLInputElement;
            searchInput?.addEventListener('input', this.debounce((e: Event) => {
                this.searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
                this.updateUI();
            }, 300));

            // Sorting
            const sortSelect = document.querySelector('.sort-select') as HTMLSelectElement;
            sortSelect?.addEventListener('change', (e) => {
                this.currentSort = (e.target as HTMLSelectElement).value;
                this.updateUI();
            });

            // View toggle
            document.querySelectorAll('.view-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const view = (e.currentTarget as HTMLElement).dataset.view;
                    this.toggleView(view || 'list');
                });
            });
        }

        private filterByCategory(category: string) {
            this.currentCategory = category;
            this.updateUI();
        }

        private toggleView(view: string) {
            const container = document.getElementById('discussions-container');
            const buttons = document.querySelectorAll('.view-btn');
            
            buttons.forEach(btn => {
                const isActive = btn.dataset.view === view;
                btn.classList.toggle('active', isActive);
                btn.setAttribute('aria-pressed', isActive.toString());
            });

            if (container) {
                container.className = `discussions__list ${view}-view`;
            }
        }

        private getFilteredDiscussions(): Discussion[] {
            let filtered = [...this.discussions];

            // Category filter
            if (this.currentCategory !== 'all') {
                filtered = filtered.filter(d => d.category === this.currentCategory);
            }

            // Search filter
            if (this.searchTerm) {
                filtered = filtered.filter(d => 
                    d.title.toLowerCase().includes(this.searchTerm) ||
                    d.content.toLowerCase().includes(this.searchTerm)
                );
            }

            // Sorting
            switch (this.currentSort) {
                case 'popular':
                    filtered.sort((a, b) => b.likes - a.likes);
                    break;
                case 'commented':
                    filtered.sort((a, b) => b.comments.length - a.comments.length);
                    break;
                default: // recent
                    filtered.sort((a, b) => 
                        new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
                    );
            }

            return filtered;
        }

        private updateUI() {
            const container = document.getElementById('discussions-container');
            if (!container) return;

            const discussions = this.getFilteredDiscussions();
            
            if (discussions.length === 0) {
                container.innerHTML = this.getEmptyStateHTML();
                return;
            }

            container.innerHTML = discussions.map(d => this.getDiscussionHTML(d)).join('');
            this.updateCategoryCounts();
        }

        private getDiscussionHTML(discussion: Discussion): string {
            return `
                <article class="discussion-card" data-id="${discussion.id}">
                    <div class="discussion-card__main">
                        <div class="discussion-card__meta">
                            <span class="category-tag">${discussion.category}</span>
                            <time datetime="${discussion.created_at}">${this.getTimeAgo(discussion.created_at)}</time>
                        </div>
                        <h3 class="discussion-card__title">${discussion.title}</h3>
                        <p class="discussion-card__preview">${discussion.content}</p>
                        <div class="discussion-card__author">By ${discussion.author}</div>
                    </div>
                    <div class="discussion-card__stats">
                        <button class="stat-btn likes-btn" data-id="${discussion.id}">
                            <span>üëç</span> ${discussion.likes}
                        </button>
                        <div class="stat">
                            <span>üí¨</span> ${discussion.comments.length}
                        </div>
                    </div>
                </article>
            `;
        }

        private getEmptyStateHTML(): string {
            return `
                <div class="empty-state">
                    <div class="empty-state__icon">üîç</div>
                    <h3>No discussions found</h3>
                    <p>Try adjusting your filters or start a new discussion</p>
                    <a href="/new-discussion" class="button">Start New Discussion</a>
                </div>
            `;
        }

        private getTimeAgo(dateStr: string): string {
            const date = new Date(dateStr);
            const seconds = Math.floor((Date.now() - date.getTime()) / 1000);
            
            if (seconds < 60) return 'just now';
            if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;
            if (seconds < 86400) return `${Math.floor(seconds / 3600)}h ago`;
            return `${Math.floor(seconds / 86400)}d ago`;
        }

        private debounce(func: Function, wait: number) {
            let timeout: number;
            return (...args: any[]) => {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }
    }
    // Initialize the forum when the DOM is ready
    function initializeForum() {
        new ForumManager();
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeForum);
    } else {
        initializeForum();
    }
</script>

<style>
    /* ... existing styles ... */

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: #f8fafc;
        border-radius: 1rem;
    }

    .empty-state__icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    .stat-btn {
        background: none;
        border: none;
        padding: 0.5rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6b7280;
        transition: color 0.2s ease;
    }

    .stat-btn:hover {
        color: #4f46e5;
    }

    .list-view {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .grid-view {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    @media (prefers-reduced-motion: reduce) {
        * {
            animation: none !important;
            transition: none !important;
        }
    }
</style>