---
import Header from './Header.astro';

interface Discussion {
    id: string;
    title: string;
    content: string;
    category: string;
    author: string;
    created_at: Date;
    likes: number;
    comments: Comment[];
}

interface Comment {
    id: string;
    author: string;
    content: string;
    created_at: Date;
    likes: number;
}

// Mock data for discussions
const discussions: Discussion[] = [
    {
        id: '1',
        title: 'Best strains for anxiety?',
        content: 'I have been struggling with anxiety and I am looking for strain recommendations.',
        category: 'treatment',
        author: 'User1',
        created_at: new Date(),
        likes: 10,
        comments: [
            {
                id: '1',
                author: 'User2',
                content: 'I recommend trying CBD-rich strains like ACDC or Harlequin.',
                created_at: new Date(),
                likes: 5
            }
        ]
    },
    {
        id: '2',
        title: 'Research on pain management',
        content: 'New study shows promising results for chronic pain treatment.',
        category: 'research',
        author: 'User3',
        created_at: new Date(Date.now() - 86400000), // 1 day ago
        likes: 15,
        comments: []
    },
    {
        id: '3',
        title: 'Strain review: Blue Dream',
        content: 'Sharing my experience with Blue Dream for sleep issues.',
        category: 'reviews',
        author: 'User4',
        created_at: new Date(Date.now() - 172800000), // 2 days ago
        likes: 8,
        comments: []
    }
];

const categories = [
    { id: 'all', name: 'All Topics', icon: 'üìã' },
    { id: 'treatment', name: 'Treatment & Methods', icon: 'üíä' },
    { id: 'reviews', name: 'Strain Reviews', icon: '‚≠ê' },
    { id: 'research', name: 'Research & Studies', icon: 'üî¨' },
    { id: 'questions', name: 'Questions & Support', icon: '‚ùì' }
];

function getTimeAgo(date: Date): string {
    const seconds = Math.floor((Date.now() - date.getTime()) / 1000);
    
    if (seconds < 60) return 'just now';
    if (seconds < 3600) return `${Math.floor(seconds / 60)} minutes ago`;
    if (seconds < 86400) return `${Math.floor(seconds / 3600)} hours ago`;
    return `${Math.floor(seconds / 86400)} days ago`;
}
---

<Header />

<main class="community">
    <section class="community__hero">
        <h1 class="community__title">Community Discussions</h1>
        <p class="community__subtitle">Share experiences and learn from other patients</p>
        
        <div class="search-wrapper">
            <input 
                type="search" 
                id="search-input"
                class="search-input" 
                placeholder="Search discussions..."
                aria-label="Search discussions"
            />
        </div>
    </section>

    <div class="community__layout">
        <aside class="sidebar">
            <nav class="categories">
                <h2>Categories</h2>
                <ul>
                    {categories.map(cat => (
                        <li>
                            <button class="category-btn" data-category={cat.id}>
                                <span class="category-icon">{cat.icon}</span>
                                <span>{cat.name}</span>
                                <span class="post-count">
                                    {cat.id === 'all' 
                                        ? discussions.length 
                                        : discussions.filter(d => d.category === cat.id).length}
                                </span>
                            </button>
                        </li>
                    ))}
                </ul>
            </nav>

            <button class="new-post-btn" id="new-post-btn">
                <span class="icon">‚úèÔ∏è</span>
                Start New Discussion
            </button>
        </aside>

        <section class="discussions">
            <div class="discussions__header">
                <select class="sort-select">
                    <option value="recent">Most Recent</option>
                    <option value="popular">Most Popular</option>
                    <option value="commented">Most Discussed</option>
                </select>
            </div>

            <div class="discussions">
                {discussions.map((discussion) => (
                    <article 
                        class="discussion-card" 
                        data-discussion-id={discussion.id}
                    >
                        <div class="discussion-card__main">
                            <div class="discussion-card__meta">
                                <span class="category-tag">{discussion.category}</span>
                                <time class="time" datetime={discussion.created_at.toISOString()}>
                                    {new Date(discussion.created_at).toLocaleDateString()}
                                </time>
                            </div>
                            <h3 class="discussion-card__title">
                                {discussion.title}
                            </h3>
                            <p class="discussion-card__preview">{discussion.content}</p>
                            <div class="discussion-card__author">
                                By {discussion.author}
                            </div>
                        </div>
                        <div class="discussion-card__stats">
                            <div class="stat">
                                <span>üëç</span> {discussion.likes}
                            </div>
                            <div class="stat">
                                <span>üí¨</span> {discussion.comments.length}
                            </div>
                        </div>
                    </article>
                ))}
            </div>
        </section>
    </div>
</main>

<style>
    .community {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .community__hero {
        text-align: center;
        padding: 3rem 1rem;
        margin-bottom: 2rem;
        background: linear-gradient(to right, #4f46e5, #6366f1);
        border-radius: 1rem;
        color: white;
    }

    .community__title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
    }

    .community__subtitle {
        font-size: 1.2rem;
        opacity: 0.9;
    }

    .search-wrapper {
        max-width: 600px;
        margin: 2rem auto 0;
    }

    .search-input {
        width: 100%;
        padding: 1rem 1.5rem;
        border: none;
        border-radius: 9999px;
        background: white;
        font-size: 1.1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .community__layout {
        display: grid;
        grid-template-columns: 250px 1fr;
        gap: 2rem;
        align-items: start;
    }

    .sidebar {
        position: sticky;
        top: 2rem;
    }

    .categories {
        background: white;
        padding: 1.5rem;
        border-radius: 1rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .categories h2 {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: #1f2937;
    }

    .category-btn {
        width: 100%;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem;
        background: none;
        border: none;
        border-radius: 0.5rem;
        cursor: pointer;
        color: #4b5563;
        transition: all 0.2s;
    }

    .category-btn:hover {
        background: #f3f4f6;
        color: #1f2937;
    }

    .post-count {
        margin-left: auto;
        background: #e5e7eb;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.875rem;
    }

    .new-post-btn {
        width: 100%;
        margin-top: 1rem;
        padding: 1rem;
        background: #4f46e5;
        color: white;
        border: none;
        border-radius: 0.5rem;
        cursor: pointer;
        font-weight: 500;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        transition: all 0.2s;
    }

    .new-post-btn:hover {
        background: #4338ca;
        transform: translateY(-1px);
    }

    .discussions__header {
        margin-bottom: 1.5rem;
    }

    .sort-select {
        padding: 0.5rem 1rem;
        border: 1px solid #e5e7eb;
        border-radius: 0.5rem;
        background: white;
        color: #4b5563;
    }

    .discussion-card {
        background: white;
        border-radius: 1rem;
        padding: 1.5rem;
        margin-bottom: 1rem;
        display: flex;
        gap: 1.5rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: all 0.2s;
        cursor: pointer;
    }

    .discussion-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .discussion-card__main {
        flex: 1;
    }

    .discussion-card__meta {
        display: flex;
        gap: 1rem;
        margin-bottom: 0.75rem;
    }

    .category-tag {
        background: #f3f4f6;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.875rem;
        color: #4b5563;
    }

    .time {
        color: #6b7280;
        font-size: 0.875rem;
    }

    .discussion-card__title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 0.75rem;
    }

    .discussion-card__title a {
        color: #1f2937;
        text-decoration: none;
    }

    .discussion-card__title a:hover {
        color: #4f46e5;
    }

    .discussion-card__preview {
        color: #4b5563;
        margin-bottom: 1rem;
        line-height: 1.5;
    }

    .discussion-card__author {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6b7280;
        font-size: 0.875rem;
    }

    .discussion-card__stats {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        padding-left: 1rem;
        border-left: 1px solid #e5e7eb;
    }

    .stat {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6b7280;
    }
    @media (max-width: 768px) {
        .community__layout {
            grid-template-columns: 1fr;
            padding: 1rem;
            gap: 1rem;
        }

        .sidebar {
            position: static;
            margin-bottom: 1rem;
            padding: 0.5rem;
            background-color: #f9fafb;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .discussion-card {
            flex-direction: column;
            margin-bottom: 1rem;
            padding: 1rem;
            background-color: #ffffff;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .discussion-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .discussion-card__stats {
            flex-direction: row;
            justify-content: space-between;
            padding: 1rem 0 0;
            border-left: none;
            border-top: 1px solid #e5e7eb;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const elements = {
            searchInput: document.querySelector('.search-input') as HTMLInputElement | null,
            categoryButtons: Array.from(document.querySelectorAll<HTMLElement>('.category-btn')),
            discussionCards: Array.from(document.querySelectorAll<HTMLElement>('.discussion-card')),
            newPostBtn: document.getElementById('new-post-btn') as HTMLElement | null
        };

        const toggleDisplay = (element: HTMLElement, condition: boolean) => {
            element.style.display = condition ? 'flex' : 'none';
        };

        const handleSearch = (e: Event) => {
            const query = (e.target as HTMLInputElement).value.toLowerCase();
            elements.discussionCards.forEach((card) => {
                const title = card.querySelector('.discussion-card__title')?.textContent?.toLowerCase() || '';
                const content = card.querySelector('.discussion-card__preview')?.textContent?.toLowerCase() || '';
                toggleDisplay(card, title.includes(query) || content.includes(query));
            });
        };

        const handleCategoryClick = (button: HTMLElement) => {
            const category = button.getAttribute('data-category');
            elements.categoryButtons.forEach((btn) => btn.classList.remove('active'));
            button.classList.add('active');

            elements.discussionCards.forEach((card) => {
                const cardCategory = card.querySelector('.category-tag')?.textContent?.toLowerCase();
                toggleDisplay(card, category === 'all' || cardCategory === category);
            });
        };

        const createNewPost = async () => {
            try {
                const response = await fetch('/api/discussions', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        title: 'New Discussion',
                        content: 'This is a new discussion.',
                        category: 'general',
                        author: 'User5'
                    })
                });

                if (!response.ok) throw new Error('Failed to create discussion');
                window.location.href = '/new-discussion';
            } catch (error) {
                alert('Failed to create discussion. Please try again.');
            }
        };

        const navigateToDiscussion = (card: HTMLElement) => {
            const discussionId = card.getAttribute('data-discussion-id');
            if (discussionId) {
                window.location.href = `/discussion/${discussionId}`;
            }
        };

        elements.searchInput?.addEventListener('input', handleSearch);
        elements.categoryButtons.forEach((button) => button.addEventListener('click', () => handleCategoryClick(button)));
        elements.newPostBtn?.addEventListener('click', createNewPost);
        elements.discussionCards.forEach((card) => card.addEventListener('click', () => navigateToDiscussion(card)));
    });
</script>