---
import Header from './Header.astro';
---

<Header />
<main class="community-container">
    <section class="hero">
        <h1>Cannabis Community</h1>
        <p>Connect with other medicinal cannabis patients and share experiences</p>
        <div class="search-bar">
            <input type="search" id="search-input" placeholder="Search discussions..." />
            <button id="search-button">Search</button>
        </div>
    </section>

    <div class="content-grid">
        <section class="discussions">
            <div class="section-header">
                <h2>Popular Discussions</h2>
                <button id="new-discussion-btn" class="new-discussion">Start Discussion</button>
            </div>
            <div id="discussion-cards" class="discussion-cards">
                <div class="loading">Loading discussions...</div>
            </div>
        </section>

        <!-- New Discussion Modal -->
        <div id="new-discussion-modal" class="modal hidden">
            <div class="modal-content">
                <h2>Start a New Discussion</h2>
                <form id="new-discussion-form">
                    <div class="input-group">
                        <label for="discussion-title">Title</label>
                        <input type="text" id="discussion-title" required minlength="5" maxlength="100">
                    </div>
                    <div class="input-group">
                        <label for="discussion-category">Category</label>
                        <select id="discussion-category" required>
                            <option value="treatment">Treatment</option>
                            <option value="reviews">Reviews</option>
                            <option value="questions">Questions</option>
                            <option value="general">General</option>
                        </select>
                    </div>
                    <div class="input-group">
                        <label for="discussion-content">Content</label>
                        <textarea id="discussion-content" required minlength="20" maxlength="2000"></textarea>
                    </div>
                    <div class="button-group">
                        <button type="button" id="cancel-discussion" class="secondary-button">Cancel</button>
                        <button type="submit" class="primary-button">Post Discussion</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</main>

<style>
    .community-container {
        padding: 2rem;
        max-width: 1200px;
        margin: 0 auto;
    }

    .hero {
        text-align: center;
        padding: 3rem 1rem;
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.85));
        border-radius: 15px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .search-bar {
        margin-top: 2rem;
        display: flex;
        justify-content: center;
        gap: 1rem;
    }

    .search-bar input {
        padding: 0.8rem 1.5rem;
        width: 100%;
        max-width: 500px;
        border: 2px solid #e0e0e0;
        border-radius: 25px;
        font-size: 1rem;
    }

    .search-bar button {
        padding: 0.8rem 2rem;
        background: #4caf50;
        color: white;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .search-bar button:hover {
        background: #388e3c;
    }

    .hero h1 {
        font-size: 3em;
        color: #2c3e50;
        margin-bottom: 0.5rem;
        font-weight: 700;
    }

    .hero p {
        font-size: 1.3em;
        color: #34495e;
    }

    .content-grid {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 2rem;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .new-discussion {
        padding: 0.8rem 1.5rem;
        background: #4caf50;
        color: white;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .new-discussion:hover {
        background: #388e3c;
        transform: translateY(-2px);
    }

    .discussions, .sidebar section {
        background: rgba(255, 255, 255, 0.95);
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
        border: 1px solid rgba(0, 0, 0, 0.05);
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .tag {
        background: #e8f5e9;
        color: #4caf50;
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-size: 0.9em;
    }

    .date {
        color: #666;
        font-size: 0.9em;
    }

    .topic-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.8rem;
    }

    .topic {
        background: #f5f5f5;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        color: #2c3e50;
        text-decoration: none;
        transition: all 0.3s ease;
    }

    .topic:hover {
        background: #4caf50;
        color: white;
    }

    .guidelines ul {
        list-style: none;
        padding: 0;
    }

    .guidelines li {
        padding: 1rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        color: #34495e;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .guidelines .icon {
        font-size: 1.2em;
    }

    @media (max-width: 768px) {
        .content-grid {
            grid-template-columns: 1fr;
        }

        .community-container {
            padding: 1rem;
        }

        .hero {
            padding: 2rem 1rem;
        }

        .hero h1 {
            font-size: 2em;
        }

        .section-header {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        width: 90%;
        max-width: 600px;
        max-height: 90vh;
        overflow-y: auto;
    }

    .input-group {
        margin-bottom: 1rem;
    }

    .input-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #2c3e50;
    }

    .input-group input,
    .input-group select,
    .input-group textarea {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 1rem;
    }

    .input-group textarea {
        min-height: 150px;
        resize: vertical;
    }

    .button-group {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 1rem;
    }

    .hidden {
        display: none !important;
    }

    .loading {
        text-align: center;
        padding: 2rem;
        color: #666;
    }

    .error {
        color: #dc3545;
        margin-top: 0.5rem;
        font-size: 0.9rem;
    }
</style>

<script>
    import { 
        auth, 
        db, 
        collection, 
        addDoc, 
        query, 
        orderBy, 
        onSnapshot,
        serverTimestamp 
    } from '../firebase';

    const discussionCards = document.getElementById('discussion-cards');
    const newDiscussionBtn = document.getElementById('new-discussion-btn');
    const modal = document.getElementById('new-discussion-modal');
    const form = document.getElementById('new-discussion-form');
    const cancelBtn = document.getElementById('cancel-discussion');

    // Listen for authentication state
    auth.onAuthStateChanged((user) => {
        if (newDiscussionBtn) {
            if (user) {
                newDiscussionBtn.style.display = 'block';
            } else {
                newDiscussionBtn.style.display = 'none';
            }
        }
    });

    // Show modal
    newDiscussionBtn?.addEventListener('click', () => {
        if (!auth.currentUser) {
            window.location.href = '/signin';
            return;
        }
        modal?.classList.remove('hidden');
    });

    // Hide modal
    cancelBtn?.addEventListener('click', () => {
        modal?.classList.add('hidden');
    });

    // Handle form submission
    form?.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (!auth.currentUser) {
            window.location.href = '/signin';
            return;
        }

        const title = (document.getElementById('discussion-title') as HTMLInputElement).value;
        const category = (document.getElementById('discussion-category') as HTMLSelectElement).value;
        const content = (document.getElementById('discussion-content') as HTMLTextAreaElement).value;

        try {
            await addDoc(collection(db, 'discussions'), {
                title,
                category,
                content,
                authorId: auth.currentUser.uid,
                authorName: auth.currentUser.displayName || 'Anonymous',
                createdAt: serverTimestamp(),
                likes: 0,
                comments: 0
            });

            modal?.classList.add('hidden');
            form.reset();
        } catch (error) {
            console.error('Error posting discussion:', error);
        }
    });

    // Listen for discussions in real-time
    const q = query(collection(db, 'discussions'), orderBy('createdAt', 'desc'));
    onSnapshot(q, (snapshot) => {
        if (!discussionCards) return;

        discussionCards.innerHTML = '';
        
        snapshot.forEach((doc) => {
            const data = doc.data();
            const date = data.createdAt?.toDate() || new Date();
            const timeAgo = getTimeAgo(date);

            discussionCards.innerHTML += `
                <article class="card" data-id="${doc.id}">
                    <div class="card-header">
                        <span class="tag">${data.category}</span>
                        <span class="date">${timeAgo}</span>
                    </div>
                    <h3>${data.title}</h3>
                    <p>${data.content.substring(0, 150)}${data.content.length > 150 ? '...' : ''}</p>
                    <div class="stats">
                        <span>👤 ${data.authorName}</span>
                        <span>❤️ ${data.likes}</span>
                        <span>💬 ${data.comments}</span>
                    </div>
                </article>
            `;
        });
    });

    function getTimeAgo(date: Date): string {
        const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000);
        
        let interval = Math.floor(seconds / 31536000);
        if (interval > 1) return interval + ' years ago';
        
        interval = Math.floor(seconds / 2592000);
        if (interval > 1) return interval + ' months ago';
        
        interval = Math.floor(seconds / 86400);
        if (interval > 1) return interval + ' days ago';
        
        interval = Math.floor(seconds / 3600);
        if (interval > 1) return interval + ' hours ago';
        
        interval = Math.floor(seconds / 60);
        if (interval > 1) return interval + ' minutes ago';
        
        return Math.floor(seconds) + ' seconds ago';
    }
</script> 