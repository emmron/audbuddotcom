---
import Header from './Header.astro';
---

<Header />
<main class="community-container">
    <section class="hero">
        <h1>Cannabis Community</h1>
        <p>Connect with other medicinal cannabis patients and share experiences</p>
        <div class="search-bar">
            <input type="search" id="search-input" placeholder="Search discussions..." />
            <button id="search-button">Search</button>
        </div>
    </section>

    <div class="content-grid">
        <section class="discussions">
            <div class="section-header">
                <h2>Popular Discussions</h2>
                <button id="new-discussion-btn" class="primary-button">Start Discussion</button>
            </div>
            <div id="discussion-cards" class="discussion-cards">
                <div class="loading">Loading discussions...</div>
            </div>
        </section>

        <div id="new-discussion-modal" class="modal hidden">
            <div class="modal-content">
                <h2>Start a New Discussion</h2>
                <form id="new-discussion-form">
                    <div class="form-group">
                        <label for="author-name">Your Name</label>
                        <input type="text" id="author-name" placeholder="Anonymous" maxlength="30">
                    </div>
                    <div class="form-group">
                        <label for="discussion-title">Title</label>
                        <input type="text" id="discussion-title" required minlength="5" maxlength="100">
                    </div>
                    <div class="form-group">
                        <label for="discussion-category">Category</label>
                        <select id="discussion-category" required>
                            <option value="treatment">Treatment</option>
                            <option value="reviews">Reviews</option>
                            <option value="questions">Questions</option>
                            <option value="general">General</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="discussion-content">Content</label>
                        <textarea id="discussion-content" required minlength="20" maxlength="2000"></textarea>
                    </div>
                    <div class="button-group">
                        <button type="button" id="cancel-discussion" class="secondary-button">Cancel</button>
                        <button type="submit" class="primary-button">Post Discussion</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</main>

<style>
    .community-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 1rem;
    }

    .hero {
        text-align: center;
        margin-bottom: 2rem;
    }

    .hero h1 {
        font-size: 2rem;
        margin-bottom: 0.5rem;
    }

    .hero p {
        color: #666;
        margin-bottom: 1.5rem;
    }

    .search-bar {
        display: flex;
        gap: 0.5rem;
        max-width: 500px;
        margin: 0 auto;
    }

    .search-bar input {
        flex: 1;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .search-bar button {
        padding: 0.5rem 1rem;
        background: #22c55e;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    :root {
        --primary-color: #22c55e;
        --primary-dark: #16a34a;
        --primary-gradient: linear-gradient(135deg, #22c55e, #16a34a);
        --secondary-color: #6366f1;
        --secondary-dark: #4f46e5;
        --text-primary: #0f172a;
        --text-secondary: #475569;
        --background-light: #ffffff;
        --background-alt: #f8fafc;
        --focus-outline: 3px solid #22c55e;
        --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        --shadow-sm: 0 2px 4px rgba(0,0,0,0.05), 0 1px 2px rgba(0,0,0,0.1);
        --shadow-md: 0 4px 6px -1px rgba(0,0,0,0.08), 0 2px 4px -2px rgba(0,0,0,0.06);
        --shadow-lg: 0 20px 25px -5px rgba(0,0,0,0.1), 0 8px 10px -6px rgba(0,0,0,0.05);
        --shadow-glow: 0 0 15px rgba(34, 197, 94, 0.3);
        --thread-border: #e2e8f0;
        --thread-bg: #ffffff;
        --thread-hover: #f8fafc;
    }

    .community-container {
        padding: 2rem;
        max-width: 1200px;
        margin: 0 auto;
        min-height: calc(100vh - 4rem);
    }

    .thread-container {
        background: var(--thread-bg);
        border-radius: 16px;
        border: 1px solid var(--thread-border);
        margin-bottom: 1.5rem;
        transition: var(--transition-smooth);
    }

    .thread-header {
        padding: 1.5rem;
        border-bottom: 1px solid var(--thread-border);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .thread-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--text-primary);
        margin: 0;
    }

    .thread-meta {
        display: flex;
        gap: 1rem;
        font-size: 0.9rem;
        color: var(--text-secondary);
    }

    .thread-content {
        padding: 1.5rem;
        line-height: 1.6;
    }

    .thread-footer {
        padding: 1rem 1.5rem;
        background: var(--thread-hover);
        border-top: 1px solid var(--thread-border);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .thread-actions {
        display: flex;
        gap: 1rem;
    }

    .thread-button {
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-size: 0.9rem;
        color: var(--text-secondary);
        background: transparent;
        border: 1px solid var(--thread-border);
        cursor: pointer;
        transition: var(--transition-smooth);
    }

    .thread-button:hover {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }

    .comments-section {
        padding: 1.5rem;
        background: var(--thread-hover);
        border-top: 1px solid var(--thread-border);
    }

    .comment {
        padding: 1.5rem;
        border-left: 3px solid var(--primary-color);
        background: var(--thread-bg);
        margin-bottom: 1rem;
        border-radius: 0 8px 8px 0;
        transition: var(--transition-smooth);
    }

    .comment:hover {
        transform: translateX(8px);
        box-shadow: var(--shadow-sm);
    }

    .comment-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.75rem;
    }

    .comment-author {
        font-weight: 600;
        color: var(--text-primary);
    }

    .comment-timestamp {
        font-size: 0.9rem;
        color: var(--text-secondary);
    }

    .comment-content {
        line-height: 1.6;
        color: var(--text-primary);
    }

    .comment-footer {
        margin-top: 1rem;
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .nested-comments {
        margin-left: 2rem;
        padding-left: 1rem;
        border-left: 2px solid var(--thread-border);
    }

    .reply-form {
        margin-top: 1rem;
        padding: 1rem;
        background: var(--thread-hover);
        border-radius: 8px;
    }

    .reply-input {
        width: 100%;
        padding: 1rem;
        border: 1px solid var(--thread-border);
        border-radius: 8px;
        margin-bottom: 1rem;
        resize: vertical;
    }

    /* Preserve existing styles... */
    /* Add all the previous styles here */

    @media (max-width: 768px) {
        .community-container {
            padding: 1rem;
        }

        .thread-header {
            flex-direction: column;
            gap: 1rem;
        }

        .thread-meta {
            flex-wrap: wrap;
        }

        .nested-comments {
            margin-left: 1rem;
        }
    }
</style>

<script>
    interface Discussion {
        id: string;
        title: string;
        category: string;
        content: string;
        authorName: string;
        createdAt: Date;
        likes: number;
        comments: Comment[];
    }

    interface Comment {
        id: string;
        authorName: string;
        content: string;
        createdAt: Date;
        likes: number;
    }

    let discussions: Discussion[] = [];
    let filteredDiscussions: Discussion[] = [];
    
    const discussionCards = document.getElementById('discussion-cards');
    const newDiscussionBtn = document.getElementById('new-discussion-btn');
    const modal = document.getElementById('new-discussion-modal');
    const form = document.getElementById('new-discussion-form') as HTMLFormElement | null;
    const cancelBtn = document.getElementById('cancel-discussion');
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const searchButton = document.getElementById('search-button');

    // Search functionality
    function searchDiscussions(query: string) {
        if (!query.trim()) {
            filteredDiscussions = [...discussions];
            renderDiscussions(filteredDiscussions);
            return;
        }

        const searchTerms = query.toLowerCase().trim().split(' ');
        
        filteredDiscussions = discussions.filter(discussion => {
            const searchableText = `
                ${discussion.title.toLowerCase()} 
                ${discussion.content.toLowerCase()} 
                ${discussion.category.toLowerCase()} 
                ${discussion.authorName.toLowerCase()}
                ${discussion.comments.map(c => `${c.content.toLowerCase()} ${c.authorName.toLowerCase()}`).join(' ')}
            `;

            return searchTerms.every(term => searchableText.includes(term));
        });

        renderDiscussions(filteredDiscussions);
    }

    searchInput?.addEventListener('input', (e) => {
        const query = (e.target as HTMLInputElement).value;
        searchDiscussions(query);
    });

    searchButton?.addEventListener('click', () => {
        searchDiscussions(searchInput?.value || '');
    });

    // Error handling utility
    const handleError = (error: unknown, context: string) => {
        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
        console.error(`${context}:`, errorMessage);
        const errorAlert = document.createElement('div');
        errorAlert.setAttribute('role', 'alert');
        errorAlert.className = 'error';
        errorAlert.textContent = 'An error occurred. Please try again.';
        document.body.appendChild(errorAlert);
        setTimeout(() => errorAlert.remove(), 5000);
    };

    // Modal handlers
    newDiscussionBtn?.addEventListener('click', () => {
        try {
            modal?.classList.remove('hidden');
            setTimeout(() => {
                document.getElementById('discussion-title')?.focus();
            }, 100);
        } catch (error) {
            handleError(error, 'Error showing modal');
        }
    });

    cancelBtn?.addEventListener('click', () => {
        try {
            modal?.classList.add('hidden');
            newDiscussionBtn?.focus();
        } catch (error) {
            handleError(error, 'Error hiding modal');
        }
    });

    // Form submission handler
    form?.addEventListener('submit', async (e) => {
        e.preventDefault();

        try {
            const formElements = {
                authorName: document.getElementById('author-name') as HTMLInputElement,
                title: document.getElementById('discussion-title') as HTMLInputElement,
                category: document.getElementById('discussion-category') as HTMLSelectElement,
                content: document.getElementById('discussion-content') as HTMLTextAreaElement
            };

            if (Object.values(formElements).some(el => !el)) {
                throw new Error('Required form elements not found');
            }

            const validations = [
                {
                    condition: formElements.title.value.trim().length < 5,
                    message: 'Title must be at least 5 characters long'
                },
                {
                    condition: formElements.content.value.trim().length < 20,
                    message: 'Content must be at least 20 characters long'
                }
            ];

            const failedValidation = validations.find(v => v.condition);
            if (failedValidation) {
                throw new Error(failedValidation.message);
            }

            const newDiscussion: Discussion = {
                id: crypto.randomUUID(),
                title: formElements.title.value.trim(),
                category: formElements.category.value,
                content: formElements.content.value.trim(),
                authorName: formElements.authorName.value.trim() || 'Anonymous',
                createdAt: new Date(),
                likes: 0,
                comments: []
            };

            discussions.unshift(newDiscussion);
            localStorage.setItem('discussions', JSON.stringify(discussions));

            modal?.classList.add('hidden');
            form.reset();
            
            const successMsg = document.createElement('div');
            successMsg.setAttribute('role', 'alert');
            successMsg.setAttribute('aria-live', 'polite');
            successMsg.className = 'success-message';
            successMsg.textContent = 'Discussion posted successfully!';
            document.body.appendChild(successMsg);

            setTimeout(() => {
                successMsg.remove();
                filteredDiscussions = [...discussions];
                renderDiscussions(filteredDiscussions);
            }, 3000);

        } catch (error) {
            handleError(error, 'Error posting discussion');
        }
    });

    // Load saved discussions
    try {
        const savedDiscussions = localStorage.getItem('discussions');
        if (savedDiscussions) {
            const parsed = JSON.parse(savedDiscussions);
            discussions = parsed.map((d: any) => ({
                ...d,
                createdAt: new Date(d.createdAt),
                comments: d.comments?.map((c: any) => ({
                    ...c,
                    createdAt: new Date(c.createdAt)
                })) || []
            }));
        } else {
            discussions = [
                {
                    id: crypto.randomUUID(),
                    title: 'Welcome to the Community',
                    category: 'general',
                    content: 'This is our first community post. Feel free to share your experiences and ask questions!',
                    authorName: 'Admin',
                    createdAt: new Date(Date.now() - 86400000),
                    likes: 5,
                    comments: [
                        {
                            id: crypto.randomUUID(),
                            authorName: 'Moderator',
                            content: 'Welcome everyone! Looking forward to great discussions.',
                            createdAt: new Date(Date.now() - 82800000),
                            likes: 3
                        }
                    ]
                }
            ];
        }
        filteredDiscussions = [...discussions];
    } catch (error) {
        handleError(error, 'Error loading saved discussions');
    }

    function highlightSearchTerms(text: string, searchQuery: string): string {
        if (!searchQuery.trim()) return text;
        
        const terms = searchQuery.toLowerCase().trim().split(' ');
        let highlightedText = text;
        
        terms.forEach(term => {
            const regex = new RegExp(`(${term})`, 'gi');
            highlightedText = highlightedText.replace(regex, '<span class="highlight">$1</span>');
        });
        
        return highlightedText;
    }

    function renderDiscussions(discussionsToRender: Discussion[]) {
        if (!discussionCards) return;

        try {
            discussionCards.innerHTML = '';
            
            if (discussionsToRender.length === 0) {
                discussionCards.innerHTML = `
                    <div class="no-results">
                        <p>No discussions found. Try different search terms or start a new discussion!</p>
                    </div>
                `;
                return;
            }
            
            discussionsToRender.forEach((data) => {
                const timeAgo = getTimeAgo(data.createdAt);
                const searchQuery = searchInput?.value || '';
                
                const highlightedTitle = highlightSearchTerms(data.title, searchQuery);
                const highlightedContent = highlightSearchTerms(
                    data.content.length > 150 ? `${data.content.substring(0, 150)}...` : data.content,
                    searchQuery
                );

                const commentsHTML = data.comments.map(comment => `
                    <div class="comment" data-comment-id="${comment.id}">
                        <div class="comment-header">
                            <span class="comment-author">👤 ${comment.authorName}</span>
                            <span class="comment-date">${getTimeAgo(comment.createdAt)}</span>
                        </div>
                        <p class="comment-content">${highlightSearchTerms(comment.content, searchQuery)}</p>
                        <div class="comment-actions">
                            <button class="like-button" aria-label="Like comment">❤️ ${comment.likes}</button>
                        </div>
                    </div>
                `).join('');

                discussionCards.innerHTML += `
                    <article class="card" data-id="${data.id}" tabindex="0">
                        <div class="card-header">
                            <span class="tag" role="status">${data.category}</span>
                            <span class="date" aria-label="Posted ${timeAgo}">${timeAgo}</span>
                        </div>
                        <h3>${highlightedTitle}</h3>
                        <p>${highlightedContent}</p>
                        <div class="stats" role="group" aria-label="Post statistics">
                            <span aria-label="Author: ${data.authorName}">👤 ${data.authorName}</span>
                            <button class="like-button" aria-label="Like discussion">❤️ ${data.likes}</button>
                            <button class="comment-button" aria-label="Show comments">💬 ${data.comments.length}</button>
                        </div>
                        <div class="comments-section">
                            ${commentsHTML}
                            <form class="comment-form">
                                <input type="text" placeholder="Add a comment..." required>
                                <button type="submit">Post</button>
                            </form>
                        </div>
                    </article>
                `;
            });

            attachInteractionHandlers();

        } catch (error) {
            handleError(error, 'Error rendering discussions');
        }
    }

    function attachInteractionHandlers() {
        const likeButtons = document.querySelectorAll('.like-button');
        const commentForms = document.querySelectorAll('.comment-form');

        likeButtons.forEach(button => {
            button.addEventListener('click', handleLike);
        });

        commentForms.forEach(form => {
            form.addEventListener('submit', handleNewComment);
        });
    }

    function handleLike(e: Event) {
        const button = e.currentTarget as HTMLButtonElement;
        const discussionId = button.closest('.card')?.dataset.id;
        const commentId = button.closest('.comment')?.dataset.commentId;

        if (discussionId) {
            const discussion = discussions.find(d => d.id === discussionId);
            if (discussion) {
                if (commentId) {
                    const comment = discussion.comments.find(c => c.id === commentId);
                    if (comment) comment.likes++;
                } else {
                    discussion.likes++;
                }
                localStorage.setItem('discussions', JSON.stringify(discussions));
                filteredDiscussions = [...discussions];
                renderDiscussions(filteredDiscussions);
            }
        }
    }

    function handleNewComment(e: Event) {
        e.preventDefault();
        const form = e.currentTarget as HTMLFormElement;
        const discussionId = form.closest('.card')?.dataset.id;
        const input = form.querySelector('input') as HTMLInputElement;

        if (discussionId && input?.value.trim()) {
            const discussion = discussions.find(d => d.id === discussionId);
            if (discussion) {
                const newComment: Comment = {
                    id: crypto.randomUUID(),
                    authorName: 'Anonymous',
                    content: input.value.trim(),
                    createdAt: new Date(),
                    likes: 0
                };
                discussion.comments.push(newComment);
                localStorage.setItem('discussions', JSON.stringify(discussions));
                filteredDiscussions = [...discussions];
                renderDiscussions(filteredDiscussions);
            }
        }
    }

    function getTimeAgo(date: Date): string {
        try {
            const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000);
            
            const intervals = [
                { seconds: 31536000, label: 'year' },
                { seconds: 2592000, label: 'month' },
                { seconds: 86400, label: 'day' },
                { seconds: 3600, label: 'hour' },
                { seconds: 60, label: 'minute' },
                { seconds: 1, label: 'second' }
            ];

            for (const interval of intervals) {
                const count = Math.floor(seconds / interval.seconds);
                if (count > 1) {
                    return `${count} ${interval.label}s ago`;
                }
                if (count === 1) {
                    return `1 ${interval.label} ago`;
                }
            }

            return 'just now';
        } catch (error) {
            handleError(error, 'Error calculating time');
            return 'some time ago';
        }
    }

    // Initial render
    renderDiscussions(filteredDiscussions);
</script>