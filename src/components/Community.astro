---
import Header from './Header.astro';
---

<Header />
<main class="community">
    <section class="community__hero">
        <h1 class="community__title">Cannabis Community</h1>
        <p class="community__subtitle">Connect with other medicinal cannabis patients and share experiences</p>
        <div class="community__search">
            <input 
                type="search" 
                id="search-input"
                class="community__search-input" 
                placeholder="Search discussions..."
                aria-label="Search discussions"
            />
            <button 
                id="search-button"
                class="community__search-button"
                aria-label="Submit search"
            >
                <svg class="icon" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                </svg>
            </button>
        </div>
    </section>

    <div class="community__content">
        <section class="community__discussions">
            <div class="community__header">
                <h2 class="community__section-title">Popular Discussions</h2>
                <button 
                    id="new-discussion-btn" 
                    class="btn btn--primary"
                    aria-label="Create new discussion"
                >
                    New Discussion
                </button>
            </div>
            
            <div id="discussion-feed" class="discussion-feed"></div>
        </section>

        <dialog id="discussion-modal" class="modal">
            <div class="modal__content">
                <header class="modal__header">
                    <h2 class="modal__title">Start a New Discussion</h2>
                    <button class="modal__close" aria-label="Close modal">×</button>
                </header>

                <form id="discussion-form" class="discussion-form">
                    <div class="form__field">
                        <label for="author" class="form__label">Display Name</label>
                        <input 
                            type="text" 
                            id="author"
                            class="form__input"
                            placeholder="Anonymous"
                            maxlength="30"
                            autocomplete="nickname"
                        >
                    </div>

                    <div class="form__field">
                        <label for="title" class="form__label">Title</label>
                        <input 
                            type="text"
                            id="title" 
                            class="form__input"
                            required
                            minlength="5"
                            maxlength="100"
                            autocomplete="off"
                        >
                    </div>

                    <div class="form__field">
                        <label for="category" class="form__label">Category</label>
                        <select id="category" class="form__select" required>
                            <option value="treatment">Treatment & Methods</option>
                            <option value="reviews">Strain Reviews</option>
                            <option value="questions">Questions & Support</option>
                            <option value="research">Research & Studies</option>
                            <option value="general">General Discussion</option>
                        </select>
                    </div>

                    <div class="form__field">
                        <label for="content" class="form__label">Content</label>
                        <textarea 
                            id="content"
                            class="form__textarea"
                            required
                            minlength="20"
                            maxlength="2000"
                            rows="5"
                        ></textarea>
                    </div>

                    <footer class="form__actions">
                        <button type="button" class="btn btn--text" data-action="cancel">Cancel</button>
                        <button type="submit" class="btn btn--primary">Post Discussion</button>
                    </footer>
                </form>
            </div>
        </dialog>
    </div>
</main>

<style>
    /* CSS Custom Properties */
    :root {
        /* Colors */
        --color-primary-50: #ecfdf5;
        --color-primary-100: #d1fae5;
        --color-primary-200: #a7f3d0;
        --color-primary-300: #6ee7b7;
        --color-primary-400: #34d399;
        --color-primary-500: #10b981;
        --color-primary-600: #059669;
        --color-primary-700: #047857;
        --color-primary-800: #065f46;
        --color-primary-900: #064e3b;
        
        --color-gray-50: #f9fafb;
        --color-gray-100: #f3f4f6;
        --color-gray-200: #e5e7eb;
        --color-gray-300: #d1d5db;
        --color-gray-400: #9ca3af;
        --color-gray-500: #6b7280;
        --color-gray-600: #4b5563;
        --color-gray-700: #374151;
        --color-gray-800: #1f2937;
        --color-gray-900: #111827;

        /* Spacing */
        --space-1: 0.25rem;
        --space-2: 0.5rem;
        --space-3: 0.75rem;
        --space-4: 1rem;
        --space-6: 1.5rem;
        --space-8: 2rem;
        --space-12: 3rem;
        --space-16: 4rem;

        /* Typography */
        --font-sans: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        --line-height-normal: 1.5;
        --line-height-tight: 1.25;

        /* Borders */
        --radius-sm: 0.25rem;
        --radius-md: 0.375rem;
        --radius-lg: 0.5rem;
        --radius-xl: 0.75rem;

        /* Shadows */
        --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
        --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);

        /* Transitions */
        --transition-base: 150ms cubic-bezier(0.4, 0, 0.2, 1);
    }

    /* Base Styles */
    .community {
        max-width: 1200px;
        margin: 0 auto;
        padding: var(--space-4);
    }

    .community__hero {
        text-align: center;
        margin-bottom: var(--space-12);
    }

    .community__title {
        font-size: 2.5rem;
        font-weight: 700;
        color: var(--color-gray-900);
        margin-bottom: var(--space-4);
    }

    .community__subtitle {
        font-size: 1.125rem;
        color: var(--color-gray-600);
        margin-bottom: var(--space-8);
    }

    .community__search {
        display: flex;
        gap: var(--space-2);
        max-width: 600px;
        margin: 0 auto;
    }

    .community__search-input {
        flex: 1;
        padding: var(--space-3) var(--space-4);
        border: 2px solid var(--color-gray-200);
        border-radius: var(--radius-lg);
        font-size: 1rem;
        transition: var(--transition-base);
    }

    .community__search-input:focus {
        outline: none;
        border-color: var(--color-primary-500);
        box-shadow: 0 0 0 3px var(--color-primary-100);
    }

    .community__search-button {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 2.75rem;
        background: var(--color-primary-500);
        border: none;
        border-radius: var(--radius-lg);
        color: white;
        cursor: pointer;
        transition: var(--transition-base);
    }

    .community__search-button:hover {
        background: var(--color-primary-600);
    }

    .community__search-button .icon {
        width: 1.5rem;
        height: 1.5rem;
        fill: currentColor;
    }

    .community__content {
        margin-top: var(--space-8);
    }

    .community__header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-6);
    }

    .community__section-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--color-gray-900);
    }

    /* Discussion Feed */
    .discussion-feed {
        display: grid;
        gap: var(--space-4);
    }

    .discussion-card {
        background: white;
        border: 1px solid var(--color-gray-200);
        border-radius: var(--radius-lg);
        padding: var(--space-6);
        transition: var(--transition-base);
    }

    .discussion-card:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-md);
    }

    /* Buttons */
    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: var(--space-2) var(--space-4);
        border-radius: var(--radius-md);
        font-weight: 500;
        transition: var(--transition-base);
        cursor: pointer;
    }

    .btn--primary {
        background: var(--color-primary-500);
        color: white;
        border: none;
    }

    .btn--primary:hover {
        background: var(--color-primary-600);
    }

    .btn--text {
        background: transparent;
        color: var(--color-gray-700);
        border: none;
    }

    .btn--text:hover {
        background: var(--color-gray-100);
    }

    /* Modal */
    .modal {
        border: none;
        border-radius: var(--radius-lg);
        padding: 0;
        max-width: 600px;
        width: 90%;
        background: white;
        box-shadow: var(--shadow-lg);
    }

    .modal::backdrop {
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(4px);
    }

    .modal__content {
        padding: var(--space-6);
    }

    .modal__header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-6);
    }

    .modal__title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--color-gray-900);
    }

    .modal__close {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: var(--color-gray-500);
        cursor: pointer;
        padding: var(--space-2);
        margin: calc(var(--space-2) * -1);
        border-radius: var(--radius-md);
        transition: var(--transition-base);
    }

    .modal__close:hover {
        background: var(--color-gray-100);
        color: var(--color-gray-900);
    }

    /* Form */
    .form__field {
        margin-bottom: var(--space-4);
    }

    .form__label {
        display: block;
        font-weight: 500;
        color: var(--color-gray-700);
        margin-bottom: var(--space-2);
    }

    .form__input,
    .form__select,
    .form__textarea {
        width: 100%;
        padding: var(--space-3);
        border: 2px solid var(--color-gray-200);
        border-radius: var(--radius-md);
        font-size: 1rem;
        transition: var(--transition-base);
    }

    .form__input:focus,
    .form__select:focus,
    .form__textarea:focus {
        outline: none;
        border-color: var(--color-primary-500);
        box-shadow: 0 0 0 3px var(--color-primary-100);
    }

    .form__textarea {
        resize: vertical;
        min-height: 100px;
    }

    .form__actions {
        display: flex;
        justify-content: flex-end;
        gap: var(--space-3);
        margin-top: var(--space-6);
    }

    @media (max-width: 768px) {
        .community__title {
            font-size: 2rem;
        }

        .community__header {
            flex-direction: column;
            gap: var(--space-4);
            align-items: flex-start;
        }

        .form__actions {
            flex-direction: column-reverse;
        }

        .btn {
            width: 100%;
        }
    }
</style>

<script>
    class DiscussionManager {
        private discussions: Map<string, Discussion> = new Map();
        private discussionFeed: HTMLElement | null;
        private modal: HTMLDialogElement | null;
        private form: HTMLFormElement | null;
        private searchInput: HTMLInputElement | null;

        constructor() {
            this.discussionFeed = document.getElementById('discussion-feed');
            this.modal = document.getElementById('discussion-modal') as HTMLDialogElement;
            this.form = document.getElementById('discussion-form') as HTMLFormElement;
            this.searchInput = document.getElementById('search-input') as HTMLInputElement;
            
            this.init();
        }

        private init(): void {
            this.loadDiscussions();
            this.setupEventListeners();
            this.renderDiscussions();
        }

        private setupEventListeners(): void {
            // Modal controls
            document.getElementById('new-discussion-btn')?.addEventListener('click', 
                () => this.modal?.showModal()
            );

            this.modal?.querySelector('.modal__close')?.addEventListener('click',
                () => this.modal?.close()
            );

            // Form submission
            this.form?.addEventListener('submit', (e) => this.handleSubmit(e));

            // Search
            this.searchInput?.addEventListener('input', (e) => {
                const query = (e.target as HTMLInputElement).value.toLowerCase();
                this.renderDiscussions(query);
            });

            // Discussion interactions
            this.discussionFeed?.addEventListener('click', (e) => {
                const target = e.target as HTMLElement;
                const discussionId = target.closest('[data-discussion-id]')?.getAttribute('data-discussion-id');

                if (!discussionId) return;

                if (target.matches('[data-action="like"]')) {
                    this.handleLike(discussionId);
                } else if (target.matches('[data-action="comment"]')) {
                    this.handleComment(discussionId);
                }
            });
        }

        private loadDiscussions(): void {
            const saved = localStorage.getItem('discussions');
            if (saved) {
                const parsed = JSON.parse(saved);
                Object.entries(parsed).forEach(([id, discussion]) => {
                    this.discussions.set(id, {
                        ...discussion as Discussion,
                        createdAt: new Date((discussion as Discussion).createdAt)
                    });
                });
            }
        }

        private saveDiscussions(): void {
            const discussionsObj = Object.fromEntries(this.discussions);
            localStorage.setItem('discussions', JSON.stringify(discussionsObj));
        }

        private renderDiscussions(searchQuery: string = ''): void {
            if (!this.discussionFeed) return;

            const discussions = Array.from(this.discussions.values())
                .filter(d => {
                    if (!searchQuery) return true;
                    return d.title.toLowerCase().includes(searchQuery) || 
                           d.content.toLowerCase().includes(searchQuery);
                })
                .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());

            this.discussionFeed.innerHTML = discussions.length ? discussions.map(d => this.createDiscussionCard(d)).join('') 
                : '<div class="empty-state">No discussions found</div>';
        }

        private createDiscussionCard(discussion: Discussion): string {
            const timeAgo = this.getTimeAgo(discussion.createdAt);
            
            return `
                <article class="discussion-card" data-discussion-id="${discussion.id}">
                    <header class="discussion-card__header">
                        <div class="discussion-card__meta">
                            <span class="discussion-card__category">${discussion.category}</span>
                            <span class="discussion-card__time">${timeAgo}</span>
                        </div>
                        <h3 class="discussion-card__title">${discussion.title}</h3>
                    </header>
                    
                    <div class="discussion-card__content">
                        <p>${discussion.content}</p>
                    </div>
                    
                    <footer class="discussion-card__footer">
                        <div class="discussion-card__author">
                            <span class="avatar">👤</span>
                            ${discussion.author}
                        </div>
                        
                        <div class="discussion-card__actions">
                            <button class="discussion-card__action" data-action="like">
                                ❤️ ${discussion.likes}
                            </button>
                            <button class="discussion-card__action" data-action="comment">
                                💬 ${discussion.comments.length}
                            </button>
                        </div>
                    </footer>
                </article>
            `;
        }

        private async handleSubmit(e: Event): Promise<void> {
            e.preventDefault();
            
            const form = e.target as HTMLFormElement;
            const formData = new FormData(form);
            
            const discussion: Discussion = {
                id: crypto.randomUUID(),
                title: formData.get('title') as string,
                content: formData.get('content') as string,
                category: formData.get('category') as string,
                author: formData.get('author') as string || 'Anonymous',
                createdAt: new Date(),
                likes: 0,
                comments: []
            };

            this.discussions.set(discussion.id, discussion);
            this.saveDiscussions();
            this.renderDiscussions();
            
            this.modal?.close();
            form.reset();
        }

        private handleLike(id: string): void {
            const discussion = this.discussions.get(id);
            if (discussion) {
                discussion.likes++;
                this.discussions.set(id, discussion);
                this.saveDiscussions();
                this.renderDiscussions();
            }
        }

        private handleComment(id: string): void {
            // Implement comment functionality
        }

        private getTimeAgo(date: Date): string {
            const seconds = Math.floor((Date.now() - date.getTime()) / 1000);
            
            const intervals = [
                { seconds: 31536000, label: 'year' },
                { seconds: 2592000, label: 'month' },
                { seconds: 86400, label: 'day' },
                { seconds: 3600, label: 'hour' },
                { seconds: 60, label: 'minute' },
                { seconds: 1, label: 'second' }
            ];

            for (const interval of intervals) {
                const count = Math.floor(seconds / interval.seconds);
                if (count > 0) {
                    return `${count} ${interval.label}${count > 1 ? 's' : ''} ago`;
                }
            }

            return 'just now';
        }
    }

    interface Discussion {
        id: string;
        title: string;
        content: string;
        category: string;
        author: string;
        createdAt: Date;
        likes: number;
        comments: Comment[];
    }

    interface Comment {
        id: string;
        author: string;
        content: string;
        createdAt: Date;
        likes: number;
    }

    // Initialize
    new DiscussionManager();
</script>